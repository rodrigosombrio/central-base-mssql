"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var rxjs_1 = require("rxjs");
var TestScheduler_1 = require("./testing/TestScheduler");
var assertDeepEquals_1 = require("./test_helpers/assertDeepEquals");
/** @test {Notification} */
describe('Notification', function () {
    it('should exist', function () {
        chai_1.expect(rxjs_1.Notification).exist;
        chai_1.expect(rxjs_1.Notification).to.be.a('function');
    });
    it('should not allow convert to observable if given kind is unknown', function () {
        var n = new rxjs_1.Notification('x');
        chai_1.expect(function () { return n.toObservable(); }).to.throw();
    });
    describe('createNext', function () {
        it('should return a Notification', function () {
            var n = rxjs_1.Notification.createNext('test');
            chai_1.expect(n instanceof rxjs_1.Notification).to.be.true;
            chai_1.expect(n.value).to.equal('test');
            chai_1.expect(n.kind).to.equal('N');
            chai_1.expect(n.error).to.be.a('undefined');
            chai_1.expect(n.hasValue).to.be.true;
        });
    });
    describe('createError', function () {
        it('should return a Notification', function () {
            var n = rxjs_1.Notification.createError('test');
            chai_1.expect(n instanceof rxjs_1.Notification).to.be.true;
            chai_1.expect(n.value).to.be.a('undefined');
            chai_1.expect(n.kind).to.equal('E');
            chai_1.expect(n.error).to.equal('test');
            chai_1.expect(n.hasValue).to.be.false;
        });
    });
    describe('createComplete', function () {
        it('should return a Notification', function () {
            var n = rxjs_1.Notification.createComplete();
            chai_1.expect(n instanceof rxjs_1.Notification).to.be.true;
            chai_1.expect(n.value).to.be.a('undefined');
            chai_1.expect(n.kind).to.equal('C');
            chai_1.expect(n.error).to.be.a('undefined');
            chai_1.expect(n.hasValue).to.be.false;
        });
    });
    describe('toObservable', function () {
        var testScheduler;
        beforeEach(function () {
            testScheduler = new TestScheduler_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
        });
        it('should create observable from a next Notification', function () {
            testScheduler.run(function (_a) {
                var expectObservable = _a.expectObservable;
                var value = 'a';
                var next = rxjs_1.Notification.createNext(value);
                expectObservable(next.toObservable()).toBe('(a|)');
            });
        });
        it('should create observable from a complete Notification', function () {
            testScheduler.run(function (_a) {
                var expectObservable = _a.expectObservable;
                var complete = rxjs_1.Notification.createComplete();
                expectObservable(complete.toObservable()).toBe('|');
            });
        });
        it('should create observable from a error Notification', function () {
            testScheduler.run(function (_a) {
                var expectObservable = _a.expectObservable;
                var error = rxjs_1.Notification.createError('error');
                expectObservable(error.toObservable()).toBe('#');
            });
        });
    });
    describe('static reference', function () {
        it('should create new next Notification with value', function () {
            var value = 'a';
            var first = rxjs_1.Notification.createNext(value);
            var second = rxjs_1.Notification.createNext(value);
            chai_1.expect(first).not.to.equal(second);
        });
        it('should create new error Notification', function () {
            var first = rxjs_1.Notification.createError();
            var second = rxjs_1.Notification.createError();
            chai_1.expect(first).not.to.equal(second);
        });
        it('should return static next Notification reference without value', function () {
            var first = rxjs_1.Notification.createNext(undefined);
            var second = rxjs_1.Notification.createNext(undefined);
            chai_1.expect(first).to.equal(second);
        });
        it('should return static complete Notification reference', function () {
            var first = rxjs_1.Notification.createComplete();
            var second = rxjs_1.Notification.createComplete();
            chai_1.expect(first).to.equal(second);
        });
    });
    describe('do', function () {
        it('should invoke on next', function () {
            var n = rxjs_1.Notification.createNext('a');
            var invoked = false;
            n.do(function (x) {
                invoked = true;
            }, function (err) {
                throw 'should not be called';
            }, function () {
                throw 'should not be called';
            });
            chai_1.expect(invoked).to.be.true;
        });
        it('should invoke on error', function () {
            var n = rxjs_1.Notification.createError();
            var invoked = false;
            n.do(function (x) {
                throw 'should not be called';
            }, function (err) {
                invoked = true;
            }, function () {
                throw 'should not be called';
            });
            chai_1.expect(invoked).to.be.true;
        });
        it('should invoke on complete', function () {
            var n = rxjs_1.Notification.createComplete();
            var invoked = false;
            n.do(function (x) {
                throw 'should not be called';
            }, function (err) {
                throw 'should not be called';
            }, function () {
                invoked = true;
            });
            chai_1.expect(invoked).to.be.true;
        });
    });
    describe('accept', function () {
        it('should accept observer for next Notification', function () {
            var value = 'a';
            var observed = false;
            var n = rxjs_1.Notification.createNext(value);
            var observer = {
                next: function (value) {
                    observed = true;
                    chai_1.expect(value).to.equal('a');
                },
                error: function () { throw new Error('should not be called'); },
                complete: function () { throw new Error('should not be called'); }
            };
            n.accept(observer);
            chai_1.expect(observed).to.be.true;
        });
        it('should accept observer for error Notification', function () {
            var observed = false;
            var n = rxjs_1.Notification.createError();
            var observer = {
                next: function () { throw new Error('should not be called'); },
                error: function (err) {
                    observed = true;
                    chai_1.expect(err).to.equal(undefined);
                },
                complete: function () { throw new Error('should not be called'); }
            };
            n.accept(observer);
            chai_1.expect(observed).to.be.true;
        });
        it('should accept observer for complete Notification', function () {
            var observed = false;
            var n = rxjs_1.Notification.createComplete();
            var observer = {
                next: function () { throw new Error('should not be called'); },
                error: function () { throw new Error('should not be called'); },
                complete: function () {
                    observed = true;
                }
            };
            n.accept(observer);
            chai_1.expect(observed).to.be.true;
        });
        it('should accept function for next Notification', function () {
            var value = 'a';
            var observed = false;
            var n = rxjs_1.Notification.createNext(value);
            n.accept(function (x) {
                chai_1.expect(x).to.equal(value);
                observed = true;
            }, function (err) {
                throw 'should not be called';
            }, function () {
                throw 'should not be called';
            });
            chai_1.expect(observed).to.be.true;
        });
        it('should accept function for error Notification', function () {
            var observed = false;
            var error = 'error';
            var n = rxjs_1.Notification.createError(error);
            n.accept(function (x) {
                throw 'should not be called';
            }, function (err) {
                chai_1.expect(err).to.equal(error);
                observed = true;
            }, function () {
                throw 'should not be called';
            });
            chai_1.expect(observed).to.be.true;
        });
        it('should accept function for complete Notification', function () {
            var observed = false;
            var n = rxjs_1.Notification.createComplete();
            n.accept(function (x) {
                throw 'should not be called';
            }, function (err) {
                throw 'should not be called';
            }, function () {
                observed = true;
            });
            chai_1.expect(observed).to.be.true;
        });
    });
    describe('observe', function () {
        it('should observe observer for next Notification', function () {
            var value = 'a';
            var observed = false;
            var n = rxjs_1.Notification.createNext(value);
            var observer = {
                next: function (value) {
                    observed = true;
                    chai_1.expect(value).to.equal('a');
                },
                error: function () { throw new Error('should not be called'); },
                complete: function () { throw new Error('should not be called'); }
            };
            n.observe(observer);
            chai_1.expect(observed).to.be.true;
        });
        it('should observe observer for error Notification', function () {
            var observed = false;
            var n = rxjs_1.Notification.createError();
            var observer = {
                next: function () { throw new Error('should not be called'); },
                error: function (err) {
                    observed = true;
                    chai_1.expect(err).to.equal(undefined);
                },
                complete: function () { throw new Error('should not be called'); }
            };
            n.observe(observer);
            chai_1.expect(observed).to.be.true;
        });
        it('should observe observer for complete Notification', function () {
            var observed = false;
            var n = rxjs_1.Notification.createComplete();
            var observer = {
                next: function () { throw new Error('should not be called'); },
                error: function () { throw new Error('should not be called'); },
                complete: function () {
                    observed = true;
                }
            };
            n.observe(observer);
            chai_1.expect(observed).to.be.true;
        });
    });
});
//# sourceMappingURL=Notification-spec.js.map