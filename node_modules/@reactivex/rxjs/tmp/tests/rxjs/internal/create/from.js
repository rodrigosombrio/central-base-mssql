"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/internal/Observable");
var isPromiseLike_1 = require("rxjs/internal/util/isPromiseLike");
var isObservable_1 = require("rxjs/internal/util/isObservable");
var isArrayLike_1 = require("rxjs/internal/util/isArrayLike");
var isIterable_1 = require("rxjs/internal/util/isIterable");
var isInteropObservable_1 = require("rxjs/internal/util/isInteropObservable");
var isAsyncIterable_1 = require("rxjs/internal/util/isAsyncIterable");
var symbolIterator_1 = require("rxjs/internal/util/symbolIterator");
var symbolObservable_1 = require("rxjs/internal/util/symbolObservable");
var symbolAsyncIterator_1 = require("rxjs/internal/util/symbolAsyncIterator");
function from(input) {
    if (isObservable_1.isObservable(input)) {
        return input;
    }
    else if (isPromiseLike_1.isPromiseLike(input)) {
        return fromPromise(input);
    }
    else if (isArrayLike_1.isArrayLike(input)) {
        return fromArrayLike(input);
    }
    else if (isIterable_1.isIterable(input)) {
        return fromIterable(input);
    }
    else if (isInteropObservable_1.isInteropObservable(input)) {
        return fromInteropObservable(input);
    }
    else if (isAsyncIterable_1.isAsyncIterable(input)) {
        return fromAsyncIterable(input);
    }
    throw new Error('Unable to convert from input to Observable source');
}
exports.from = from;
function fromArrayLike(arr) {
    return new Observable_1.Observable(function (subscriber) {
        for (var i = 0; i < arr.length && !subscriber.closed; i++) {
            subscriber.next(arr[i]);
        }
        subscriber.complete();
    });
}
function fromPromise(promise) {
    return new Observable_1.Observable(function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) {
            !subscriber.closed && subscriber.error(err);
        });
    });
}
function fromIterable(iterable) {
    return new Observable_1.Observable(function (subscriber) {
        var iterator = iterable[symbolIterator_1.symbolIterator]();
        while (!subscriber.closed) {
            var _a = iterator.next(), done = _a.done, value = _a.value;
            if (done) {
                subscriber.complete();
                return;
            }
            else {
                subscriber.next(value);
            }
        }
    });
}
function fromInteropObservable(interopObservable) {
    return new Observable_1.Observable(function (subscriber) {
        return interopObservable[symbolObservable_1.symbolObservable]().subscribe(subscriber);
    });
}
function fromAsyncIterable(asyncIterable) {
    return new Observable_1.Observable(function (subscriber) {
        var asyncIterator = asyncIterable[symbolAsyncIterator_1.symbolAsyncIterator]();
        var iterate = function () {
            if (!subscriber.closed) {
                asyncIterator.next().then(function (_a) {
                    var done = _a.done, value = _a.value;
                    if (!subscriber.closed) {
                        if (done) {
                            subscriber.complete();
                        }
                        else {
                            subscriber.next(value);
                            iterate();
                        }
                    }
                });
            }
        };
        iterate();
    });
}
//# sourceMappingURL=from.js.map