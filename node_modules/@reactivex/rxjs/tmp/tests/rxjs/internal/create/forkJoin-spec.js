"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
var lowerCaseO_1 = require("../test_helpers/lowerCaseO");
/** @test {forkJoin} */
describe('forkJoin', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('forkJoin')
    it('should join the last values of the provided observables into an array', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('---a---b---c---d---|'), hot('-1---2---3---|'));
            var expected = '-------------------(x|)';
            expectObservable(e1).toBe(expected, { x: ['d', '3'] });
        });
    });
    it('should join the last values of the provided observables into an array', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--a--b--c--d--|'), hot('(b|)'), hot('--1--2--3--|'));
            var expected = '--------------(x|)';
            expectObservable(e1).toBe(expected, { x: ['d', 'b', '3'] });
        });
    });
    it('should allow emit null or undefined', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e2 = rxjs_1.forkJoin(hot('--a--b--c--d--|', { d: null }), hot('(b|)'), hot('--1--2--3--|'), hot('-----r--t--u--|', { u: undefined }));
            var expected2 = '--------------(x|)';
            expectObservable(e2).toBe(expected2, { x: [null, 'b', '3', undefined] });
        });
    });
    it('should accept single observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--a--b--c--d--|'));
            var expected = '--------------(x|)';
            expectObservable(e1).toBe(expected, { x: ['d'] });
        });
    });
    it('should accept array of observable contains single', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin([hot('--a--b--c--d--|')]);
            var expected = '--------------(x|)';
            expectObservable(e1).toBe(expected, { x: ['d'] });
        });
    });
    it('should accept lowercase-o observables', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--a--b--c--d--|'), hot('(b|)'), lowerCaseO_1.lowerCaseO('1', '2', '3'));
            var expected = '--------------(x|)';
            expectObservable(e1).toBe(expected, { x: ['d', 'b', '3'] });
        });
    });
    it('should accept empty lowercase-o observables', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--a--b--c--d--|'), hot('(b|)'), lowerCaseO_1.lowerCaseO());
            var expected = '|';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should accept promise', function (done) {
        var e1 = rxjs_1.forkJoin(rxjs_1.of(1), Promise.resolve(2));
        e1.subscribe({
            next: function (x) {
                chai_1.expect(x).to.deep.equal([1, 2]);
            },
            error: function (err) {
                done(new Error('should not be called'));
            },
            complete: done,
        });
    });
    it('should accept array of observables', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin([
                hot(' --a--b--c--d--|'),
                hot(' (b|)'),
                hot(' --1--2--3--|')
            ]);
            var expected = '--------------(x|)';
            expectObservable(e1).toBe(expected, { x: ['d', 'b', '3'] });
        });
    });
    it('should not emit if any of source observable is empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--a--b--c--d--|'), hot('(b|)'), hot('------------------|'));
            var expected = '------------------|';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should complete early if any of source is empty and completes before than others', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--a--b--c--d--|'), hot('(b|)'), hot('---------|'));
            var expected = '---------|';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should complete when all sources are empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--------------|'), hot('---------|'));
            var expected = '---------|';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should not complete when only source never completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--------------'));
            var expected = '-';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should not complete when one of the sources never completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--------------'), hot('-a---b--c--|'));
            var expected = '-';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should complete when one of the sources never completes but other completes without values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('--------------'), hot('------|'));
            var expected = '------|';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should complete if source is not provided', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin();
            var expected = '|';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should complete if sources list is empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin([]);
            var expected = '|';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should raise error when any of source raises error with empty observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('------#'), hot('---------|'));
            var expected = '------#';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should raise error when any of source raises error with source that never completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('------#'), hot('----------'));
            var expected = '------#';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should raise error when source raises error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.forkJoin(hot('------#'), hot('---a-----|'));
            var expected = '------#';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should allow unsubscribing early and explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c---d-| ');
            var e1subs = '^        !    ';
            var e2 = hot('---e-^---f--g---h-|');
            var e2subs = '^        !    ';
            var expected = '----------    ';
            var unsub = '         !    ';
            var result = rxjs_1.forkJoin(e1, e2);
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should unsubscribe other Observables, when one of them errors', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c---d-| ');
            var e1subs = '^        !    ';
            var e2 = hot('---e-^---f--g-#');
            var e2subs = '^        !    ';
            var expected = '---------#    ';
            var result = rxjs_1.forkJoin(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
});
//# sourceMappingURL=forkJoin-spec.js.map