"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {combineLatest} */
describe('static combineLatest', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    it('should combineLatest the provided observables', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var firstSource = hot('----a----b----c----|');
            var secondSource = hot('--d--e--f--g--|');
            var expected = '----uv--wx-y--z----|';
            var combined = rxjs_1.combineLatest(firstSource, secondSource);
            expectObservable(combined).toBe(expected, { u: ['a', 'd'], v: ['a', 'e'], w: ['a', 'f'], x: ['b', 'f'], y: ['b', 'g'], z: ['c', 'g'] });
        });
    });
    // TODO(benlesh): deprecate passing scheduler to combineLatest
    // it('should combine an immediately-scheduled source with an immediately-scheduled second', (done) => {
    //   const a = of<number>(1, 2, 3, queueScheduler);
    //   const b = of<number>(4, 5, 6, 7, 8, queueScheduler);
    //   const r = [[1, 4], [2, 4], [2, 5], [3, 5], [3, 6], [3, 7], [3, 8]];
    //   //type definition need to be updated
    //   combineLatest(a, b, queueScheduler).subscribe((vals) => {
    //     expect(vals).to.deep.equal(r.shift());
    //   }, (x) => {
    //     done(new Error('should not be called'));
    //   }, () => {
    //     expect(r.length).to.equal(0);
    //     done();
    //   });
    // });
    it('should accept array of observables', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var firstSource = hot('----a----b----c----|');
            var secondSource = hot('--d--e--f--g--|');
            var expected = '----uv--wx-y--z----|';
            var combined = rxjs_1.combineLatest([firstSource, secondSource]);
            expectObservable(combined).toBe(expected, { u: ['a', 'd'], v: ['a', 'e'], w: ['a', 'f'], x: ['b', 'f'], y: ['b', 'g'], z: ['c', 'g'] });
        });
    });
    it('should work with two nevers', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var e2 = cold('-');
            var e2subs = '^';
            var expected = '-';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with never and empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var e2 = cold('|');
            var e2subs = '(^!)';
            var expected = '-';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with empty and never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var e2 = cold('-');
            var e2subs = '^';
            var expected = '-';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with empty and empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var e2 = cold('|');
            var e2subs = '(^!)';
            var expected = '|';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with hot-empty and hot-single', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('-a-^-|');
            var e1subs = '^ !';
            var e2 = hot('-b-^-c-|');
            var e2subs = '^   !';
            var expected = '----|';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with hot-single and hot-empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('-a-^-|');
            var e1subs = '^ !';
            var e2 = hot('-b-^-c-|');
            var e2subs = '^   !';
            var expected = '----|';
            var result = rxjs_1.combineLatest(e2, e1);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with hot-single and never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('-a-^-|');
            var e1subs = '^ !';
            var e2 = hot('------'); //never
            var e2subs = '^  ';
            var expected = '-'; //never
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with never and hot-single', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--------'); //never
            var e1subs = '^    ';
            var e2 = hot('-a-^-b-|');
            var e2subs = '^   !';
            var expected = '-----'; //never
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with hot and hot', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c--|');
            var e1subs = '^        !';
            var e2 = hot('---e-^---f--g--|');
            var e2subs = '^         !';
            var expected = '----x-yz--|';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, { x: ['b', 'f'], y: ['c', 'f'], z: ['c', 'g'] });
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with empty and error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('----------|'); //empty
            var e1subs = '^     !';
            var e2 = hot('------#', null, 'shazbot!'); //error
            var e2subs = '^     !';
            var expected = '------#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'shazbot!');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with error and empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--^---#', null, 'too bad, honk'); //error
            var e1subs = '^   !';
            var e2 = hot('--^--------|'); //empty
            var e2subs = '^   !';
            var expected = '----#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'too bad, honk');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with hot and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('-a-^--b--c--|');
            var e1subs = '^ !';
            var e2 = hot('---^-#', null, 'bazinga');
            var e2subs = '^ !';
            var expected = '--#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'bazinga');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with throw and hot', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^-#', null, 'bazinga');
            var e1subs = '^ !';
            var e2 = hot('-a-^--b--c--|');
            var e2subs = '^ !';
            var expected = '--#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'bazinga');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with throw and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^----#', null, 'jenga');
            var e1subs = '^ !';
            var e2 = hot('---^-#', null, 'bazinga');
            var e2subs = '^ !';
            var expected = '--#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'bazinga');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with error and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('-a-^--b--#', null, 'wokka wokka');
            var e1subs = '^ !';
            var e2 = hot('---^-#', null, 'flurp');
            var e2subs = '^ !';
            var expected = '--#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'flurp');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with throw and error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^-#', null, 'flurp');
            var e1subs = '^ !';
            var e2 = hot('-a-^--b--#', null, 'wokka wokka');
            var e2subs = '^ !';
            var expected = '--#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'flurp');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with never and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^-----------');
            var e1subs = '^     !';
            var e2 = hot('---^-----#', null, 'wokka wokka');
            var e2subs = '^     !';
            var expected = '------#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'wokka wokka');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with throw and never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^----#', null, 'wokka wokka');
            var e1subs = '^    !';
            var e2 = hot('---^-----------');
            var e2subs = '^    !';
            var expected = '-----#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'wokka wokka');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with some and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^----a---b--|');
            var e1subs = '^  !';
            var e2 = hot('---^--#', null, 'wokka wokka');
            var e2subs = '^  !';
            var expected = '---#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, { a: 1, b: 2 }, 'wokka wokka');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should work with throw and some', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^--#', null, 'wokka wokka');
            var e1subs = '^  !';
            var e2 = hot('---^----a---b--|');
            var e2subs = '^  !';
            var expected = '---#';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, null, 'wokka wokka');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should handle throw after complete left', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var left = hot('--a--^--b---|');
            var leftSubs = '^      !';
            var right = hot('-----^--------#', null, 'bad things');
            var rightSubs = '^        !';
            var expected = '---------#';
            var result = rxjs_1.combineLatest(left, right);
            expectObservable(result).toBe(expected, null, 'bad things');
            expectSubscriptionsTo(left).toBe(leftSubs);
            expectSubscriptionsTo(right).toBe(rightSubs);
        });
    });
    it('should handle throw after complete right', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var left = hot('-----^--------#', null, 'bad things');
            var leftSubs = '^        !';
            var right = hot('--a--^--b---|', null);
            var rightSubs = '^      !';
            var expected = '---------#';
            var result = rxjs_1.combineLatest(left, right);
            expectObservable(result).toBe(expected, null, 'bad things');
            expectSubscriptionsTo(left).toBe(leftSubs);
            expectSubscriptionsTo(right).toBe(rightSubs);
        });
    });
    it('should handle interleaved with tail', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('-a--^--b---c---|');
            var e1subs = '^          !';
            var e2 = hot('--d-^----e---f--|');
            var e2subs = '^           !';
            var expected = '-----x-y-z--|';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, { x: ['b', 'e'], y: ['c', 'e'], z: ['c', 'f'] });
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should handle two consecutive hot observables', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c--|');
            var e1subs = '^        !';
            var e2 = hot('-----^----------d--e--f--|');
            var e2subs = '^                   !';
            var expected = '-----------x--y--z--|';
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result).toBe(expected, { x: ['c', 'd'], y: ['c', 'e'], z: ['c', 'f'] });
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should handle two consecutive hot observables with error left', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var left = hot('--a--^--b--c--#', null, 'jenga');
            var leftSubs = '^        !';
            var right = hot('-----^----------d--e--f--|');
            var rightSubs = '^        !';
            var expected = '---------#';
            var result = rxjs_1.combineLatest(left, right);
            expectObservable(result).toBe(expected, null, 'jenga');
            expectSubscriptionsTo(left).toBe(leftSubs);
            expectSubscriptionsTo(right).toBe(rightSubs);
        });
    });
    it('should handle two consecutive hot observables with error right', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var left = hot('--a--^--b--c--|');
            var leftSubs = '^        !';
            var right = hot('-----^----------d--e--f--#', null, 'dun dun dun');
            var rightSubs = '^                   !';
            var expected = '-----------x--y--z--#';
            var result = rxjs_1.combineLatest(left, right);
            expectObservable(result).toBe(expected, { x: ['c', 'd'], y: ['c', 'e'], z: ['c', 'f'] }, 'dun dun dun');
            expectSubscriptionsTo(left).toBe(leftSubs);
            expectSubscriptionsTo(right).toBe(rightSubs);
        });
    });
    it('should allow unsubscribing early and explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c---d-| ');
            var e1subs = '^        !    ';
            var e2 = hot('---e-^---f--g---h-|');
            var e2subs = '^        !    ';
            var expected = '----x-yz--    ';
            var unsub = '^--------!    ';
            var values = { x: ['b', 'f'], y: ['c', 'f'], z: ['c', 'g'] };
            var result = rxjs_1.combineLatest(e1, e2);
            expectObservable(result, unsub).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should not break unsubscription chains when unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c---d-| ');
            var e1subs = '^        !    ';
            var e2 = hot('---e-^---f--g---h-|');
            var e2subs = '^        !    ';
            var expected = '----x-yz--    ';
            var unsub = '^--------!    ';
            var values = { x: ['b', 'f'], y: ['c', 'f'], z: ['c', 'g'] };
            var result = rxjs_1.combineLatest(e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); })), e2.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }))).pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
});
//# sourceMappingURL=combineLatest-spec.js.map