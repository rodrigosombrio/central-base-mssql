"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var TestScheduler_1 = require("../testing/TestScheduler");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
/** @test {defer} */
describe('defer', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new TestScheduler_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('defer(() => Observable.of(a, b, c))')
    it('should defer the creation of a simple Observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var expected = '-a--b--c--|';
            var e1 = rxjs_1.defer(function () { return cold('-a--b--c--|'); });
            expectObservable(e1).toBe(expected);
        });
    });
    it('should create an observable from the provided observable factory', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('--a--b--c--|');
            var sourceSubs = '^          !';
            var expected = '--a--b--c--|';
            var e1 = rxjs_1.defer(function () { return source; });
            expectObservable(e1).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should create an observable from completed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('|');
            var sourceSubs = '(^!)';
            var expected = '|';
            var e1 = rxjs_1.defer(function () { return source; });
            expectObservable(e1).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should accept factory returns promise resolves', function (done) {
        var expected = 42;
        var e1 = rxjs_1.defer(function () {
            return new Promise(function (resolve) { resolve(expected); });
        });
        e1.subscribe({
            next: function (x) {
                chai_1.expect(x).to.equal(expected);
                done();
            },
            error: function () {
                done(new Error('should not be called'));
            }
        });
    });
    it('should accept factory returns promise rejects', function (done) {
        var expected = 42;
        var e1 = rxjs_1.defer(function () {
            return new Promise(function (resolve, reject) { reject(expected); });
        });
        e1.subscribe({
            next: function () {
                done(new Error('should not be called'));
            },
            error: function (x) {
                chai_1.expect(x).to.equal(expected);
                done();
            },
            complete: function () {
                done(new Error('should not be called'));
            }
        });
    });
    it('should create an observable from error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('#');
            var sourceSubs = '(^!)';
            var expected = '#';
            var e1 = rxjs_1.defer(function () { return source; });
            expectObservable(e1).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
            debugger;
        });
    });
    it('should create an observable when factory throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.defer(function () {
                throw 'error';
            });
            var expected = '#';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should allow unsubscribing early and explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('--a--b--c--|');
            var sourceSubs = '^     !     ';
            var expected = '--a--b-     ';
            var unsub = '^-----!     ';
            var e1 = rxjs_1.defer(function () { return source; });
            expectObservable(e1, unsub).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should not break unsubscription chains when result is unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('--a--b--c--|');
            var sourceSubs = '^     !     ';
            var expected = '--a--b-     ';
            var unsub = '^-----!     ';
            var e1 = rxjs_1.defer(function () { return source.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.mergeMap(function (x) { return rxjs_1.of(x); })); });
            expectObservable(e1, unsub).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
});
//# sourceMappingURL=defer-spec.js.map