"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var operators_1 = require("rxjs/operators");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
/** @test {of} */
describe('of', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('of(1, 2, 3)')
    it('should create a cold observable that emits 1, 2, 3', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.of(1, 2, 3).pipe(
            // for the purpose of making a nice diagram, spread out the synchronous emissions
            operators_1.concatMap(function (x, i) { return rxjs_1.of(x).pipe(operators_1.delay(i === 0 ? 0 : 2, testScheduler)); }));
            var expected = 'x-y-(z|)';
            expectObservable(e1).toBe(expected, { x: 1, y: 2, z: 3 });
        });
    });
    it('should create an observable from the provided values', function (done) {
        var x = { foo: 'bar' };
        var expected = [1, 'a', x];
        var i = 0;
        rxjs_1.of(1, 'a', x)
            .subscribe({
            next: function (y) {
                chai_1.expect(y).to.equal(expected[i++]);
            },
            error: function () {
                done(new Error('should not be called'));
            },
            complete: done
        });
    });
    it('should emit one value', function (done) {
        var calls = 0;
        rxjs_1.of(42).subscribe({
            next: function (x) {
                chai_1.expect(++calls).to.equal(1);
                chai_1.expect(x).to.equal(42);
            },
            error: function () {
                done(new Error('should not be called'));
            },
            complete: done
        });
    });
    it('should handle an Observable as the only value', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = rxjs_1.of(rxjs_1.of('a', 'b', 'c'));
            var result = source.pipe(operators_1.concatAll());
            expectObservable(result).toBe('(abc|)');
        });
    });
    it('should handle many Observable as the given values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = rxjs_1.of(rxjs_1.of('a', 'b', 'c'), rxjs_1.of('d', 'e', 'f'));
            var result = source.pipe(operators_1.concatAll());
            expectObservable(result).toBe('(abcdef|)');
        });
    });
});
//# sourceMappingURL=of-spec.js.map