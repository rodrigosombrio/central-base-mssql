"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var chai_1 = require("chai");
var operators_1 = require("rxjs/operators");
var symbolObservable_1 = require("rxjs/internal/util/symbolObservable");
var symbolAsyncIterator_1 = require("rxjs/internal/util/symbolAsyncIterator");
describe('from', function () {
    it('should convert a Promise to an observable', function (done) {
        var results = [];
        rxjs_1.from(Promise.resolve('test'))
            .subscribe({
            next: function (value) { results.push(value); },
            complete: function () {
                results.push('done');
                chai_1.expect(results).to.deep.equal(['test', 'done']);
                done();
            },
        });
    });
    describe('from(Array)', function () {
        it('should convert an Array to an observable', function () {
            var results = [];
            var source = [1, 2, 3];
            rxjs_1.from(source)
                .subscribe({
                next: function (value) { results.push(value); },
                complete: function () {
                    results.push('done');
                },
            });
            chai_1.expect(results).to.deep.equal([1, 2, 3, 'done']);
        });
        it('should work with take', function () {
            var results = [];
            var source = [1, 2, 3, 4, 5];
            rxjs_1.from(source).pipe(operators_1.take(3))
                .subscribe({
                next: function (value) { results.push(value); },
                complete: function () {
                    results.push('done');
                },
            });
            chai_1.expect(results).to.deep.equal([1, 2, 3, 'done']);
        });
    });
    describe('from(ArrayLike)', function () {
        it('should convert an ArrayLike to an observable', function () {
            var results = [];
            var source = {
                '0': 1,
                '1': 2,
                '2': 3,
                length: 3,
            };
            rxjs_1.from(source)
                .subscribe({
                next: function (value) { results.push(value); },
                complete: function () {
                    results.push('done');
                },
            });
            chai_1.expect(results).to.deep.equal([1, 2, 3, 'done']);
        });
        it('should work with take', function () {
            var results = [];
            var source = {
                '0': 1,
                '1': 2,
                '2': 3,
                '3': 4,
                '4': 5,
                length: 5,
            };
            rxjs_1.from(source).pipe(operators_1.take(3))
                .subscribe({
                next: function (value) { results.push(value); },
                complete: function () {
                    results.push('done');
                },
            });
            chai_1.expect(results).to.deep.equal([1, 2, 3, 'done']);
        });
    });
    describe('from(Iterable)', function () {
        it('should convert an Iterable to an observable', function () {
            var results = [];
            var source = 'Weee!';
            rxjs_1.from(source)
                .subscribe({
                next: function (value) { results.push(value); },
                complete: function () {
                    results.push('done');
                },
            });
            chai_1.expect(results).to.deep.equal(['W', 'e', 'e', 'e', '!', 'done']);
        });
        it('should work with take', function () {
            var results = [];
            var source = 'Weeeeeeeeeeeeeee!';
            rxjs_1.from(source).pipe(operators_1.take(3))
                .subscribe({
                next: function (value) { results.push(value); },
                complete: function () {
                    results.push('done');
                },
            });
            chai_1.expect(results).to.deep.equal(['W', 'e', 'e', 'done']);
        });
    });
    describe('from(Promise)', function () {
        it('should convert a promise to an observable', function (done) {
            var results = [];
            var promise = Promise.resolve('Dr Boolean says I am an F-, not an A+');
            rxjs_1.from(promise).subscribe({
                next: function (value) { results.push(value); },
                complete: function () {
                    chai_1.expect(results).to.deep.equal(['Dr Boolean says I am an F-, not an A+']);
                    done();
                }
            });
        });
        it('should handle take(0)', function (done) {
            var results = [];
            var promise = Promise.resolve('Dr Boolean says I am an F-, not an A+');
            rxjs_1.from(promise).pipe(operators_1.take(0)).subscribe({
                next: function (value) { results.push(value); },
                complete: function () {
                    chai_1.expect(results).to.deep.equal([]);
                    done();
                }
            });
        });
        it('should handle early unsubscribe', function () {
            var results = [];
            var promise = Promise.resolve('Try and stop me');
            var subscription;
            Promise.resolve().then(function () {
                subscription.unsubscribe();
            });
            subscription = rxjs_1.from(promise).subscribe({
                next: function (value) { results.push(value); },
                complete: function () { results.push('done'); }
            });
            return Promise.resolve().then(function () {
                chai_1.expect(results).to.deep.equal([]);
            });
        });
    });
    describe('from(obj[Symbol.observable])', function () {
        var _original;
        before(function () {
            var counter = 0;
            _original = Symbol && Symbol.observable;
            Symbol = Symbol || function (desc) { return '' + (counter++); };
            Symbol.observable = Symbol.observable || symbolObservable_1.symbolObservable;
        });
        after(function () {
            Symbol.observable = _original;
        });
        it('should convert from an Observable-interoperable object to an observable', function () {
            var _a;
            var results = [];
            var obj = (_a = {},
                _a[Symbol.observable] = function () {
                    return {
                        subscribe: function (observer) {
                            observer.next(1);
                            observer.next(2);
                            observer.next(3);
                            observer.complete();
                        }
                    };
                },
                _a);
            rxjs_1.from(obj).subscribe({
                next: function (value) { results.push(value); },
                complete: function () { results.push('done'); },
            });
            chai_1.expect(results).to.deep.equal([1, 2, 3, 'done']);
        });
        it('should return a subscription that unsubscribes the interop subscription', function () {
            var _a;
            var unsubscribed = false;
            var obj = (_a = {},
                _a[Symbol.observable] = function () {
                    return {
                        subscribe: function () {
                            return {
                                unsubscribe: function () {
                                    unsubscribed = true;
                                }
                            };
                        }
                    };
                },
                _a);
            var sub = rxjs_1.from(obj).subscribe();
            chai_1.expect(unsubscribed).to.be.false;
            sub.unsubscribe();
            chai_1.expect(unsubscribed).to.be.true;
        });
    });
    describe('from(asyncIterable)', function () {
        var _existingAsyncIterator = Symbol.asyncIterator;
        before(function () {
            var counter = 0;
            if (!_existingAsyncIterator) {
                Symbol = Symbol || function () { return '' + (counter++); };
                Symbol.asyncIterator = Symbol.asyncIterator || symbolAsyncIterator_1.symbolAsyncIterator;
            }
        });
        after(function () {
            if (!_existingAsyncIterator) {
                Symbol.asyncIterator = undefined;
            }
        });
        it('should convert an asyncIterable', function (done) {
            var results = [];
            function gen() {
                return __asyncGenerator(this, arguments, function gen_1() {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, __await(1)];
                            case 1: return [4 /*yield*/, _a.sent()];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, __await(2)];
                            case 3: return [4 /*yield*/, _a.sent()];
                            case 4:
                                _a.sent();
                                return [4 /*yield*/, __await(3)];
                            case 5: return [4 /*yield*/, _a.sent()];
                            case 6:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
            rxjs_1.from(gen()).subscribe({
                next: function (value) { results.push(value); },
                complete: function () {
                    chai_1.expect(results).to.deep.equal([1, 2, 3]);
                    done();
                },
            });
        });
    });
});
//# sourceMappingURL=from-spec.js.map