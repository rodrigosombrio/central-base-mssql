"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {race} */
describe('static race', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    it('should race a single observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a-----b-----c----|');
            var e1subs = '^                   !';
            var expected = '---a-----b-----c----|';
            var result = rxjs_1.race(e1);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should race cold and cold', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a-----b-----c----|');
            var e1subs = '^                   !';
            var e2 = cold('------x-----y-----z----|');
            var e2subs = '^  !';
            var expected = '---a-----b-----c----|';
            var result = rxjs_1.race(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should race with array of observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a-----b-----c----|');
            var e1subs = '^                   !';
            var e2 = cold('------x-----y-----z----|');
            var e2subs = '^  !';
            var expected = '---a-----b-----c----|';
            var result = rxjs_1.race([e1, e2]);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should race hot and hot', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---a-----b-----c----|');
            var e1subs = '^                   !';
            var e2 = hot('------x-----y-----z----|');
            var e2subs = '^  !';
            var expected = '---a-----b-----c----|';
            var result = rxjs_1.race(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should race hot and cold', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a-----b-----c----|');
            var e1subs = '^                   !';
            var e2 = hot('------x-----y-----z----|');
            var e2subs = '^  !';
            var expected = '---a-----b-----c----|';
            var result = rxjs_1.race(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should race 2nd and 1st', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('------x-----y-----z----|');
            var e1subs = '^  !';
            var e2 = cold('---a-----b-----c----|');
            var e2subs = '^                   !';
            var expected = '---a-----b-----c----|';
            var result = rxjs_1.race(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should race emit and complete', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-----|');
            var e1subs = '^    !';
            var e2 = hot('------x-----y-----z----|');
            var e2subs = '^    !';
            var expected = '-----|';
            var result = rxjs_1.race(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should allow unsubscribing early and explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a-----b-----c----|');
            var e1subs = '^           !';
            var e2 = hot('------x-----y-----z----|');
            var e2subs = '^  !';
            var expected = '---a-----b---';
            var unsub = '^-----------!';
            var result = rxjs_1.race(e1, e2);
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should not break unsubscription chains when unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c---d-| ');
            var e1subs = '^        !    ';
            var e2 = hot('---e-^---f--g---h-|');
            var e2subs = '^  !    ';
            var expected = '---b--c---    ';
            var unsub = '^--------!    ';
            var result = rxjs_1.race(e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); })), e2.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }))).pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should never emit when given non emitting sources', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---|');
            var e2 = cold('---|');
            var e1subs = '^  !';
            var expected = '---|';
            var source = rxjs_1.race(e1, e2);
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should throw when error occurs mid stream', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a-----#');
            var e1subs = '^        !';
            var e2 = cold('------x-----y-----z----|');
            var e2subs = '^  !';
            var expected = '---a-----#';
            var result = rxjs_1.race(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should throw when error occurs before a winner is found', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---#');
            var e1subs = '^  !';
            var e2 = cold('------x-----y-----z----|');
            var e2subs = '^  !';
            var expected = '---#';
            var result = rxjs_1.race(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('handle empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var expected = '|';
            var source = rxjs_1.race(e1);
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('handle never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var expected = '-';
            var source = rxjs_1.race(e1);
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('handle throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '#';
            var source = rxjs_1.race(e1);
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
});
//# sourceMappingURL=race-spec.js.map