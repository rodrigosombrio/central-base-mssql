"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
/** @test {concat} */
describe('static concat', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    it('should emit elements from multiple sources', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-a-b-c-|');
            var e1subs = '^      !';
            var e2 = cold('-0-1-|');
            var e2subs = '       ^    !';
            var e3 = cold('-w-x-y-z-|');
            var e3subs = '            ^        !';
            var expected = '-a-b-c--0-1--w-x-y-z-|';
            expectObservable(rxjs_1.concat(e1, e2, e3)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should concat the same cold observable multiple times', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var inner = cold('--i-j-k-l-|                              ');
            var innersubs = ['^         !                              ',
                '          ^         !                    ',
                '                    ^         !          ',
                '                              ^         !'];
            var expected = '--i-j-k-l---i-j-k-l---i-j-k-l---i-j-k-l-|';
            var result = rxjs_1.concat(inner, inner, inner, inner);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(inner).toBe(innersubs);
        });
    });
    it('should concat the same cold observable multiple times, ' +
        'but the result is unsubscribed early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var inner = cold('--i-j-k-l-|     ');
            var unsub = '^--------------!';
            var innersubs = ['^         !     ',
                '          ^    !'];
            var expected = '--i-j-k-l---i-j-';
            var result = rxjs_1.concat(inner, inner, inner, inner);
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(inner).toBe(innersubs);
        });
    });
    it('should not break unsubscription chains when result is unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var inner = cold('--i-j-k-l-|     ');
            var innersubs = ['^         !     ',
                '          ^    !'];
            var expected = '--i-j-k-l---i-j-';
            var unsub = '^--------------!';
            var innerWrapped = inner.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            var result = rxjs_1.concat(innerWrapped, innerWrapped, innerWrapped, innerWrapped)
                .pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(inner).toBe(innersubs);
        });
    });
    it('should complete without emit if both sources are empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--|');
            var e1subs = '^ !';
            var e2 = cold('----|');
            var e2subs = '  ^   !';
            var expected = '------|';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should not complete if first source does not completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var e2 = cold('--|');
            var e2subs = '';
            var expected = '-';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should not complete if second source does not completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--|');
            var e1subs = '^ !';
            var e2 = cold('---');
            var e2subs = '  ^';
            var expected = '---';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should not complete if both sources do not complete', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var e2 = cold('-');
            var e2subs = '';
            var expected = '-';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should raise error when first source is empty, second source raises error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--|');
            var e1subs = '^ !';
            var e2 = cold('----#');
            var e2subs = '  ^   !';
            var expected = '------#';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should raise error when first source raises error, second source is empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---#');
            var e1subs = '^  !';
            var e2 = cold('----|');
            var e2subs = '';
            var expected = '---#';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should raise first error when both source raise error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---#');
            var e1subs = '^  !';
            var e2 = cold('------#');
            var e2subs = '';
            var expected = '---#';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should concat if first source emits once, second source is empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--|');
            var e1subs = '^    !';
            var e2 = cold('--------|');
            var e2subs = '     ^       !';
            var expected = '--a----------|';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should concat if first source is empty, second source emits once', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--|');
            var e1subs = '^ !';
            var e2 = cold('--a--|');
            var e2subs = '  ^    !';
            var expected = '----a--|';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should emit element from first source, and should not complete if second ' +
        'source does not completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--|');
            var e1subs = '^    !';
            var e2 = cold('-');
            var e2subs = '     ^';
            var expected = '--a---';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should not complete if first source does not complete', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var e2 = cold('--a--|');
            var e2subs = '';
            var expected = '-';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should emit elements from each source when source emit once', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a|');
            var e1subs = '^   !';
            var e2 = cold('-----b--|');
            var e2subs = '    ^       !';
            var expected = '---a-----b--|';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should unsubscribe to inner source if outer is unsubscribed early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a-a--a|            ');
            var e1subs = '^        !            ';
            var e2 = cold('-----b-b--b-|');
            var e2subs = '         ^       !    ';
            var unsub = '^----------------!    ';
            var expected = '---a-a--a-----b-b     ';
            expectObservable(rxjs_1.concat(e1, e2), unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should raise error from first source and does not emit from second source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--#');
            var e1subs = '^ !';
            var e2 = cold('----a--|');
            var e2subs = '';
            var expected = '--#';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should emit element from first source then raise error from second source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--|');
            var e1subs = '^    !';
            var e2 = cold('-------#');
            var e2subs = '     ^      !';
            var expected = '--a---------#';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should emit all elements from both hot observable sources if first source ' +
        'completes before second source starts emit', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b-|');
            var e1subs = '^      !';
            var e2 = hot('--------x--y--|');
            var e2subs = '       ^      !';
            var expected = '--a--b--x--y--|';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should emit elements from second source regardless of completion time ' +
        'when second source is cold observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c---|');
            var e1subs = '^           !';
            var e2 = cold('-x-y-z-|');
            var e2subs = '            ^      !';
            var expected = '--a--b--c----x-y-z-|';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should not emit collapsing element from second source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c--|');
            var e1subs = '^          !';
            var e2 = hot('--------x--y--z--|');
            var e2subs = '           ^     !';
            var expected = '--a--b--c--y--z--|';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should return empty if concatenating an empty source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = ['(^!)', '(^!)'];
            var expected = '|';
            var result = rxjs_1.concat(e1, e1);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should error immediately if given a just-throw source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '#';
            var result = rxjs_1.concat(e1, e1);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should emit elements from second source regardless of completion time ' +
        'when second source is cold observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c---|');
            var e1subs = '^           !';
            var e2 = cold('-x-y-z-|');
            var e2subs = '            ^      !';
            var expected = '--a--b--c----x-y-z-|';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should not emit collapsing element from second source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c--|');
            var e1subs = '^          !';
            var e2 = hot('--------x--y--z--|');
            var e2subs = '           ^     !';
            var expected = '--a--b--c--y--z--|';
            expectObservable(rxjs_1.concat(e1, e2)).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    // it('should concat an immediately-scheduled source with an immediately-scheduled second', done => {
    //   const a = of<number>(1, 2, 3, queueScheduler);
    //   const b = of<number>(4, 5, 6, 7, 8, queueScheduler);
    //   const r = [1, 2, 3, 4, 5, 6, 7, 8];
    //   concat(a, b, queueScheduler).subscribe((vals) => {
    //     expect(vals).to.equal(r.shift());
    //   }, null, done);
    // });
    // it('should use the scheduler even when one Observable is concat\'d', done => {
    //   let e1Subscribed = false;
    //   const e1 = defer(() => {
    //     e1Subscribed = true;
    //     return of('a');
    //   });
    //   concat(e1, asyncScheduler)
    //     .subscribe({
    //       error: done,
    //       complete: () => {
    //         expect(e1Subscribed).to.be.true;
    //         done();
    //       }
    //     });
    //   expect(e1Subscribed).to.be.false;
    // });
});
//# sourceMappingURL=concat-spec.js.map