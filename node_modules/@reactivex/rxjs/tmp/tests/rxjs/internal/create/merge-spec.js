"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("rxjs/testing");
var rxjs_1 = require("rxjs");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
var lowerCaseO_1 = require("../test_helpers/lowerCaseO");
/** @test {merge} */
describe('merge', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    it('should merge cold and cold', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a-----b-----c----|');
            var e1subs = '^                   !';
            var e2 = cold('------x-----y-----z----|');
            var e2subs = '^                      !';
            var expected = '---a--x--b--y--c--z----|';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge hot and hot', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---a---^-b-----c----|');
            var e1subs = '^            !';
            var e2 = hot('-----x-^----y-----z----|');
            var e2subs = '^               !';
            var expected = '--b--y--c--z----|';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge hot and cold', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---a-^---b-----c----|');
            var e1subs = '^              !';
            var e2 = cold('--x-----y-----z----|');
            var e2subs = '^                  !';
            var expected = '--x-b---y-c---z----|';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge parallel emissions', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---a----b----c----|');
            var e1subs = '^                 !';
            var e2 = hot('---x----y----z----|');
            var e2subs = '^                 !';
            var expected = '---(ax)-(by)-(cz)-|';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge empty and empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var e2 = cold('|');
            var e2subs = '(^!)';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe('|');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge three empties', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var e2 = cold('|');
            var e2subs = '(^!)';
            var e3 = cold('|');
            var e3subs = '(^!)';
            var result = rxjs_1.merge(e1, e2, e3);
            expectObservable(result).toBe('|');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should merge never and empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var e2 = cold('|');
            var e2subs = '(^!)';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe('-');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge never and never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var e2 = cold('-');
            var e2subs = '^';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe('-');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge empty and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var e2 = cold('#');
            var e2subs = '(^!)';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe('#');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge hot and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c--|');
            var e1subs = '(^!)';
            var e2 = cold('#');
            var e2subs = '(^!)';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe('#');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge never and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '(^!)';
            var e2 = cold('#');
            var e2subs = '(^!)';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe('#');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge empty and eventual error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var e2 = hot('-------#');
            var e2subs = '^------!';
            var expected = '-------#';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge hot and error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c--|');
            var e1subs = '^      !    ';
            var e2 = hot('-------#    ');
            var e2subs = '^      !    ';
            var expected = '--a--b-#    ';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge never and error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('-');
            var e1subs = '^      !';
            var e2 = hot('-------#');
            var e2subs = '^      !';
            var expected = '-------#';
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
        });
    });
    it('should merge single lowerCaseO into RxJS Observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = lowerCaseO_1.lowerCaseO('a', 'b', 'c');
            var result = rxjs_1.merge(e1);
            expectObservable(result).toBe('(abc|)');
        });
    });
    it('should merge two lowerCaseO into RxJS Observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = lowerCaseO_1.lowerCaseO('a', 'b', 'c');
            var e2 = lowerCaseO_1.lowerCaseO('d', 'e', 'f');
            var result = rxjs_1.merge(e1, e2);
            expectObservable(result).toBe('(abcdef|)');
        });
    });
});
// describe('merge(...observables, Scheduler)', () => {
//   it('should merge single lowerCaseO into RxJS Observable', () => {
//     testScheduler.run(({ hot, cold, expectObservable, expectSubscriptionsTo }) => {
//       const e1 = lowerCaseO('a', 'b', 'c');
//       const result = merge(e1, testScheduler);
//       expect(result).to.be.instanceof(Observable);
//       expectObservable(result).toBe('(abc|)');
//     });
//   });
// });
// describe('merge(...observables, Scheduler, number)', () => {
//   it('should handle concurrency limits', () => {
//     testScheduler.run(({ hot, cold, expectObservable, expectSubscriptionsTo }) => {
//       const e1 =  cold('---a---b---c---|');
//       const e2 =  cold('-d---e---f--|');
//       const e3 =  cold(            '---x---y---z---|');
//       const expected = '-d-a-e-b-f-c---x---y---z---|';
//       expectObservable(merge(e1, e2, e3, 2)).toBe(expected);
//     });
//   });
//   it('should handle scheduler', () => {
//     testScheduler.run(({ hot, cold, expectObservable, expectSubscriptionsTo }) => {
//       const e1 =  of('a');
//       const e2 =  of('b').delay(20, testScheduler);
//       const expected = 'a-(b|)';
//       expectObservable(merge(e1, e2, testScheduler)).toBe(expected);
//     });
//   });
//   it('should handle scheduler with concurrency limits', () => {
//     testScheduler.run(({ hot, cold, expectObservable, expectSubscriptionsTo }) => {
//       const e1 =  cold('---a---b---c---|');
//       const e2 =  cold('-d---e---f--|');
//       const e3 =  cold(            '---x---y---z---|');
//       const expected = '-d-a-e-b-f-c---x---y---z---|';
//       expectObservable(merge(e1, e2, e3, 2, testScheduler)).toBe(expected);
//     });
//   });
//   it('should use the scheduler even when one Observable is merged', (done) => {
//     let e1Subscribed = false;
//     const e1 = defer(() => {
//       e1Subscribed = true;
//       return of('a');
//     });
//     merge(e1, asyncScheduler)
//       .subscribe({
//         error: done,
//         complete: () => {
//           expect(e1Subscribed).to.be.true;
//           done();
//         }
//       });
//     expect(e1Subscribed).to.be.false;
//   });
// });
//# sourceMappingURL=merge-spec.js.map