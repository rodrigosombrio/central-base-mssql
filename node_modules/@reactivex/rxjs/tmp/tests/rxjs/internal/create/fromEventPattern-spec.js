"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
/** @test {fromEventPattern} */
describe('fromEventPattern', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('fromEventPattern(addHandler, removeHandler)')
    it('should create an observable from the handler API', function () {
        testScheduler.run(function (_a) {
            var expectObservable = _a.expectObservable;
            function addHandler(handler) {
                rxjs_1.timer(5, 2, testScheduler).pipe(operators_1.mapTo('ev'), operators_1.take(2), operators_1.concatWith(rxjs_1.NEVER)).subscribe(function (x) { return handler(x); });
            }
            var e1 = rxjs_1.fromEventPattern(addHandler);
            var expected = '-----x-x---';
            expectObservable(e1).toBe(expected, { x: 'ev' });
        });
    });
    it('should call addHandler on subscription', function () {
        var addHandlerCalls = [];
        var addHandler = function () {
            addHandlerCalls.push(Array.from(arguments));
        };
        rxjs_1.fromEventPattern(addHandler, rxjs_1.noop).subscribe(rxjs_1.noop);
        chai_1.expect(addHandlerCalls.length).to.equal(1);
        chai_1.expect(addHandlerCalls[0][0]).to.be.a('function');
    });
    it('should call removeHandler on unsubscription', function () {
        var removeHandlerCalls = [];
        var removeHandler = function () {
            removeHandlerCalls.push(Array.from(arguments));
        };
        rxjs_1.fromEventPattern(rxjs_1.noop, removeHandler).subscribe(rxjs_1.noop).unsubscribe();
        chai_1.expect(removeHandlerCalls.length).to.equal(1);
        chai_1.expect(removeHandlerCalls[0][0]).to.be.a('function');
    });
    it('should work without optional removeHandler', function () {
        var addHandlerCalls = 0;
        var addHandler = function () {
            addHandlerCalls++;
        };
        rxjs_1.fromEventPattern(addHandler).subscribe(rxjs_1.noop);
        chai_1.expect(addHandlerCalls).to.equal(1);
    });
    it('should deliver return value of addHandler to removeHandler as signal', function () {
        var expected = { signal: true };
        var addHandler = function () { return expected; };
        var removeHandlerCalls = [];
        var removeHandler = function () {
            removeHandlerCalls.push(Array.from(arguments));
        };
        rxjs_1.fromEventPattern(addHandler, removeHandler).subscribe(rxjs_1.noop).unsubscribe();
        chai_1.expect(removeHandlerCalls[0][1]).to.equal(expected);
    });
    it('should send errors in addHandler down the error path', function (done) {
        rxjs_1.fromEventPattern(function (h) {
            throw 'bad';
        }, rxjs_1.noop).subscribe({
            next: function () { return done(new Error('should not be called')); },
            error: function (err) {
                chai_1.expect(err).to.equal('bad');
                done();
            },
            complete: function () { return done(new Error('should not be called')); }
        });
    });
});
//# sourceMappingURL=fromEventPattern-spec.js.map