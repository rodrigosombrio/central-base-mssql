"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
describe('iif', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    it('should subscribe to thenSource when the conditional returns true', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.iif(function () { return true; }, rxjs_1.of('a'));
            var expected = '(a|)';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should subscribe to elseSource when the conditional returns false', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.iif(function () { return false; }, rxjs_1.of('a'), rxjs_1.of('b'));
            var expected = '(b|)';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should complete without an elseSource when the conditional returns false', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.iif(function () { return false; }, rxjs_1.of('a'));
            var expected = '|';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should raise error when conditional throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.iif((function () {
                throw 'error';
            }), rxjs_1.of('a'));
            var expected = '#';
            expectObservable(e1).toBe(expected);
        });
    });
    it('should accept resolved promise as thenSource', function (done) {
        var expected = 42;
        var e1 = rxjs_1.iif(function () { return true; }, new Promise(function (resolve) { resolve(expected); }));
        e1.subscribe({
            next: function (x) {
                chai_1.expect(x).to.equal(expected);
            },
            error: function () {
                done(new Error('should not be called'));
            },
            complete: function () {
                done();
            }
        });
    });
    it('should accept resolved promise as elseSource', function (done) {
        var expected = 42;
        var e1 = rxjs_1.iif(function () { return false; }, rxjs_1.of('a'), new Promise(function (resolve) { resolve(expected); }));
        e1.subscribe({
            next: function (x) {
                chai_1.expect(x).to.equal(expected);
            },
            error: function () {
                done(new Error('should not be called'));
            },
            complete: function () {
                done();
            }
        });
    });
    it('should accept rejected promise as elseSource', function (done) {
        var expected = 42;
        var e1 = rxjs_1.iif(function () { return false; }, rxjs_1.of('a'), new Promise(function (resolve, reject) { reject(expected); }));
        e1.subscribe({
            next: function () {
                done(new Error('should not be called'));
            },
            error: function (err) {
                chai_1.expect(err).to.equal(expected);
                done();
            },
            complete: function () {
                done(new Error('should not be called'));
            }
        });
    });
    it('should accept rejected promise as thenSource', function (done) {
        var expected = 42;
        var e1 = rxjs_1.iif(function () { return true; }, new Promise(function (resolve, reject) { reject(expected); }));
        e1.subscribe({
            next: function () {
                done(new Error('should not be called'));
            },
            error: function (err) {
                chai_1.expect(err).to.equal(expected);
                done();
            },
            complete: function () {
                done(new Error('should not be called'));
            }
        });
    });
});
//# sourceMappingURL=iif-spec.js.map