"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var userFunction_1 = require("./util/userFunction");
var UnsubscriptionError_1 = require("./util/UnsubscriptionError");
var isSubscription_1 = require("rxjs/internal/util/isSubscription");
var Subscription = /** @class */ (function () {
    function Subscription(teardown) {
        this._teardowns = [];
        this._closed = false;
        if (teardown) {
            this.add(teardown);
        }
    }
    Object.defineProperty(Subscription.prototype, "closed", {
        get: function () {
            return this._closed;
        },
        enumerable: true,
        configurable: true
    });
    Subscription.prototype.unsubscribe = function () {
        if (!this._closed) {
            this._closed = true;
            this._unsubscribe();
        }
    };
    Subscription.prototype._unsubscribe = function () {
        var _teardowns = this._teardowns.slice();
        var errors = undefined;
        while (_teardowns.length > 0) {
            var teardown_1 = _teardowns.shift();
            var result = userFunction_1.tryUserFunction(teardown_1);
            if (userFunction_1.resultIsError(result)) {
                var err = result.error;
                errors = errors || [];
                if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                    errors.push.apply(errors, err.errors);
                }
                else {
                    errors.push(err);
                }
            }
        }
        if (errors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    Subscription.prototype.add = function (teardownLogic) {
        var _this = this;
        if (!teardownLogic || teardownLogic === this) {
            return;
        }
        var teardown;
        if (isSubscription_1.isSubscription(teardownLogic)) {
            if (this._closed) {
                teardownLogic.unsubscribe();
                return;
            }
            else {
                teardown = function () { return teardownLogic.unsubscribe(); };
                teardownLogic.add(function () {
                    var _teardowns = _this._teardowns;
                    var index = _teardowns.indexOf(teardown);
                    if (index >= 0) {
                        _teardowns.splice(index, 1);
                    }
                });
            }
        }
        else if (typeof teardownLogic === 'function') {
            teardown = teardownLogic;
            if (this._closed) {
                teardown();
                return;
            }
        }
        else {
            return;
        }
        this._teardowns.push(teardown);
    };
    return Subscription;
}());
exports.Subscription = Subscription;
//# sourceMappingURL=Subscription.js.map