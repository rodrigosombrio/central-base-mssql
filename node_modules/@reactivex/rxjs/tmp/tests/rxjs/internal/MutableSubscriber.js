"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscription_1 = require("rxjs/internal/Subscription");
var noop_1 = require("rxjs/internal/util/noop");
var hostReportError_1 = require("rxjs/internal/util/hostReportError");
var MutableSubscriber = /** @class */ (function () {
    function MutableSubscriber(next, error, complete) {
        var _this = this;
        this.next = next;
        this.error = error;
        this.complete = complete;
        this.closed = false;
        this.subscription = new Subscription_1.Subscription();
        this.subscription.add(function () { return _this.closed = true; });
    }
    return MutableSubscriber;
}());
exports.MutableSubscriber = MutableSubscriber;
var MutableObserverSubscriber = /** @class */ (function (_super) {
    __extends(MutableObserverSubscriber, _super);
    function MutableObserverSubscriber(observer) {
        var _this = _super.call(this, observer.next ? function (value) {
            if (!_this.closed) {
                observer.next(value, _this.subscription);
            }
        } : noop_1.noop, function (err) {
            if (!_this.closed) {
                _this.closed = true;
                if (observer.error) {
                    observer.error(err);
                }
                else {
                    hostReportError_1.hostReportError(err);
                }
                _this.subscription.unsubscribe();
            }
            else {
                hostReportError_1.hostReportError(new Error('Multiple Errors: ' + err.toString())); // TODO: make this match v6
            }
        }, function () {
            if (!_this.closed) {
                _this.closed = true;
                observer.complete && observer.complete();
                _this.subscription.unsubscribe();
            }
        }) || this;
        return _this;
    }
    return MutableObserverSubscriber;
}(MutableSubscriber));
exports.MutableObserverSubscriber = MutableObserverSubscriber;
function mutableSubscriberFromCallbacks(next, error, complete) {
    return new MutableObserverSubscriber({
        next: next, error: error, complete: complete,
    });
}
exports.mutableSubscriberFromCallbacks = mutableSubscriberFromCallbacks;
//# sourceMappingURL=MutableSubscriber.js.map