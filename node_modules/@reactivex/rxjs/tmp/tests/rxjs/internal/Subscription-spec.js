"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var chai_1 = require("chai");
/** @test {Subscription} */
describe('Subscription', function () {
    it('should be an instanceof Subscription', function () {
        var s = new rxjs_1.Subscription();
        chai_1.expect(s).to.be.an.instanceof(rxjs_1.Subscription);
    });
    it('should add children, and unsub in order', function () {
        var results = [];
        var s = new rxjs_1.Subscription();
        s.add(function () { return results.push(0); });
        s.add(function () { return results.push(1); });
        s.add(function () { return results.push(2); });
        var child = new rxjs_1.Subscription();
        child.add(function () { return results.push(3); });
        s.add(child);
        s.add(function () { return results.push(4); });
        chai_1.expect(results).to.deep.equal([]);
        s.unsubscribe();
        chai_1.expect(results).to.deep.equal([0, 1, 2, 3, 4]);
    });
    it('should set up children to remove themselves', function () {
        var results = [];
        var parent = new rxjs_1.Subscription();
        var child1 = new rxjs_1.Subscription();
        child1.add(function () { return results.push(1); });
        var child2 = new rxjs_1.Subscription();
        child2.add(function () { return results.push(2); });
        var child3 = new rxjs_1.Subscription();
        child3.add(function () { return results.push(3); });
        parent.add(child1);
        parent.add(child2);
        parent.add(child3);
        chai_1.expect(results).to.deep.equal([]);
        child2.unsubscribe();
        chai_1.expect(results).to.deep.equal([2]);
        parent.unsubscribe();
        chai_1.expect(results).to.deep.equal([2, 1, 3]);
    });
    it('should not leak', function (done) {
        var tearDowns = [];
        var source1 = new rxjs_1.Observable(function (subscriber) {
            return function () {
                tearDowns.push(1);
            };
        });
        var source2 = new rxjs_1.Observable(function (subscriber) {
            return function () {
                tearDowns.push(2);
                throw new Error('oops, I am a bad unsubscribe!');
            };
        });
        var source3 = new rxjs_1.Observable(function (subscriber) {
            return function () {
                tearDowns.push(3);
            };
        });
        var subscription = rxjs_1.merge(source1, source2, source3).subscribe();
        setTimeout(function () {
            chai_1.expect(function () {
                subscription.unsubscribe();
            }).to.throw(rxjs_1.UnsubscriptionError);
            chai_1.expect(tearDowns).to.deep.equal([1, 2, 3]);
            done();
        });
    });
    it('should not leak when adding a bad custom subscription to a subscription', function (done) {
        var tearDowns = [];
        var sub = new rxjs_1.Subscription();
        var source1 = new rxjs_1.Observable(function (subscriber) {
            return function () {
                tearDowns.push(1);
            };
        });
        var source2 = new rxjs_1.Observable(function (subscriber) {
            return function () {
                tearDowns.push(2);
                sub.add(({
                    unsubscribe: function () {
                        chai_1.expect(sub.closed).to.be.true;
                        throw new Error('Who is your daddy, and what does he do?');
                    }
                }));
            };
        });
        var source3 = new rxjs_1.Observable(function (subscriber) {
            return function () {
                tearDowns.push(3);
            };
        });
        sub.add(rxjs_1.merge(source1, source2, source3).subscribe());
        setTimeout(function () {
            chai_1.expect(function () {
                sub.unsubscribe();
            }).to.throw(rxjs_1.UnsubscriptionError);
            chai_1.expect(tearDowns).to.deep.equal([1, 2, 3]);
            done();
        });
    });
    describe('Subscription.add()', function () {
        it('should unsubscribe the passed one if the self has been unsubscribed', function () {
            var main = new rxjs_1.Subscription();
            main.unsubscribe();
            var isCalled = false;
            var child = new rxjs_1.Subscription();
            child.add(function () {
                isCalled = true;
            });
            main.add(child);
            chai_1.expect(isCalled).to.equal(true);
        });
    });
});
//# sourceMappingURL=Subscription-spec.js.map