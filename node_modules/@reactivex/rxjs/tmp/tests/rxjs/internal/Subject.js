"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/internal/Observable");
var ObjectUnsubscribedError_1 = require("rxjs/internal/util/ObjectUnsubscribedError");
var Subject = /** @class */ (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._subscribers = [];
        _this._closed = false;
        _this._hasError = false;
        _this._hasCompleted = false;
        _this._disposed = false;
        return _this;
    }
    Object.defineProperty(Subject.prototype, "closed", {
        get: function () {
            return this._closed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Subject.prototype, "disposed", {
        get: function () {
            return this._disposed;
        },
        enumerable: true,
        configurable: true
    });
    Subject.prototype.subscribe = function (nextOrObserver) {
        this._throwIfDisposed();
        return _super.prototype.subscribe.call(this, nextOrObserver);
    };
    Subject.prototype._init = function (mut) {
        if (this._hasError) {
            mut.error(this._error);
            return;
        }
        if (this._hasCompleted) {
            mut.complete();
            return;
        }
        if (this._closed) {
            return;
        }
        var _subscribers = this._subscribers;
        _subscribers.push(mut);
        return function () {
            var i = _subscribers.indexOf(mut);
            if (i >= 0) {
                _subscribers.splice(i, 1);
            }
        };
    };
    Subject.prototype.next = function (value) {
        this._throwIfDisposed();
        if (!this._closed) {
            var copy = this._subscribers.slice();
            for (var _i = 0, copy_1 = copy; _i < copy_1.length; _i++) {
                var subscriber = copy_1[_i];
                subscriber.next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        this._throwIfDisposed();
        if (!this._closed) {
            this._closed = true;
            this._hasError = true;
            this._error = err;
            var copy = this._subscribers.slice();
            this._subscribers.length = 0;
            for (var i = 0; i < copy.length; i++) {
                copy[i].error(err);
            }
        }
    };
    Subject.prototype.complete = function () {
        this._throwIfDisposed();
        if (!this._closed) {
            this._closed = true;
            this._hasCompleted = true;
            var copy = this._subscribers.slice();
            this._subscribers.length = 0;
            debugger;
            for (var i = 0; i < copy.length; i++) {
                copy[i].complete();
            }
        }
    };
    Subject.prototype.unsubscribe = function () {
        this._subscribers = null;
        this._disposed = true;
    };
    Subject.prototype.asObservable = function () {
        var _this = this;
        return new Observable_1.Observable(function (subscriber) { return _this.subscribe(subscriber); });
    };
    Subject.prototype._throwIfDisposed = function () {
        if (this._disposed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
//# sourceMappingURL=Subject.js.map