"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("rxjs/internal/Subject");
var now_only_1 = require("rxjs/internal/scheduler/now_only");
var ReplaySubject = /** @class */ (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(_bufferSize, _windowTime, _scheduler) {
        if (_bufferSize === void 0) { _bufferSize = Number.POSITIVE_INFINITY; }
        if (_windowTime === void 0) { _windowTime = Number.POSITIVE_INFINITY; }
        if (_scheduler === void 0) { _scheduler = now_only_1.NOW_ONLY_SCHEDULER; }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._scheduler = _scheduler;
        _this._buffer = [];
        return _this;
    }
    ReplaySubject.prototype._init = function (mut) {
        this._cleanBuffer();
        for (var _i = 0, _a = this._buffer; _i < _a.length; _i++) {
            var value = _a[_i].value;
            mut.next(value);
        }
        return _super.prototype._init.call(this, mut);
    };
    ReplaySubject.prototype.next = function (value) {
        var _a = this, _buffer = _a._buffer, _scheduler = _a._scheduler;
        var timestamp = _scheduler.now();
        _buffer.push({ value: value, timestamp: timestamp });
        this._cleanBuffer();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._cleanBuffer = function () {
        var _a = this, _buffer = _a._buffer, _scheduler = _a._scheduler, _bufferSize = _a._bufferSize, _windowTime = _a._windowTime;
        var now = _scheduler.now();
        if (_bufferSize < Number.POSITIVE_INFINITY) {
            _buffer.splice(0, _buffer.length - _bufferSize);
        }
        if (_windowTime < Number.POSITIVE_INFINITY) {
            var cutoff = now - _windowTime;
            var i = 0;
            while (i < _buffer.length && _buffer[i].timestamp < cutoff) {
                i++;
            }
            _buffer.splice(0, i);
        }
    };
    return ReplaySubject;
}(Subject_1.Subject));
exports.ReplaySubject = ReplaySubject;
//# sourceMappingURL=ReplaySubject.js.map