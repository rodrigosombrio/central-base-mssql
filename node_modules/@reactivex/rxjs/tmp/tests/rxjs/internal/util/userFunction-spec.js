"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var userFunction_1 = require("rxjs/internal/util/userFunction");
var chai_1 = require("chai");
describe('tryUserFunction and resultIsError', function () {
    it('should return ERROR_OBJECT for functions that error', function () {
        var passedArgs;
        function erroringFunction() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            passedArgs = args;
            throw new Error('test');
        }
        var result = userFunction_1.tryUserFunction(erroringFunction, [1, 2, 3]);
        chai_1.expect(userFunction_1.resultIsError(result)).to.be.true;
        chai_1.expect(passedArgs).to.deep.equal([1, 2, 3]);
    });
    it('should return the result and not ERROR_OBJECT for non-erroring functions', function () {
        var passedArgs;
        function happyFunction() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            passedArgs = args;
            return 'happy result';
        }
        var result = userFunction_1.tryUserFunction(happyFunction, [1, 2, 3]);
        chai_1.expect(userFunction_1.resultIsError(result)).to.be.false;
        chai_1.expect(result).to.equal('happy result');
        chai_1.expect(passedArgs).to.deep.equal([1, 2, 3]);
    });
    it('should allow passing context', function () {
        var passedContext;
        var passedArgs;
        function fn() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            passedContext = this;
            passedArgs = args;
            return 'happy result';
        }
        var context = {};
        var result = userFunction_1.tryUserFunction(fn, [1, 2, 3], context);
        chai_1.expect(result).to.equal('happy result');
        chai_1.expect(passedContext).to.equal(context);
        chai_1.expect(passedArgs).to.deep.equal([1, 2, 3]);
    });
});
//# sourceMappingURL=userFunction-spec.js.map