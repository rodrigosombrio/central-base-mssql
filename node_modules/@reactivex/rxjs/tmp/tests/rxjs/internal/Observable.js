"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var userFunction_1 = require("rxjs/internal/util/userFunction");
var pipe_1 = require("./util/pipe");
var Subscriber_1 = require("./Subscriber");
var MutableSubscriber_1 = require("rxjs/internal/MutableSubscriber");
var rxjs_1 = require("rxjs");
var Observable = /** @class */ (function () {
    function Observable(_subscribe) {
        this._subscribe = _subscribe;
    }
    Observable.prototype._reconcileMutableSubscriber = function (nextOrObserver) {
        if (nextOrObserver instanceof MutableSubscriber_1.MutableSubscriber) {
            return nextOrObserver;
        }
        else {
            if (nextOrObserver) {
                if (typeof nextOrObserver === 'object') {
                    return new MutableSubscriber_1.MutableObserverSubscriber(nextOrObserver);
                }
                else {
                    return new MutableSubscriber_1.MutableObserverSubscriber({ next: nextOrObserver });
                }
            }
            else {
                return new MutableSubscriber_1.MutableObserverSubscriber({ next: rxjs_1.noop });
            }
        }
    };
    Observable.prototype._init = function (mut) {
        return this._subscribe && this._subscribe(new Subscriber_1.Subscriber(mut));
    };
    Observable.prototype.subscribe = function (nextOrObserver) {
        var mut = this._reconcileMutableSubscriber(nextOrObserver);
        var subscription = mut.subscription;
        var teardown = userFunction_1.tryUserFunction(this._init, [mut], this);
        if (userFunction_1.resultIsError(teardown)) {
            mut.error(teardown.error);
        }
        else {
            subscription.add(teardown);
        }
        return subscription;
    };
    Observable.prototype.lift = function (operator) {
        return new LiftedObservable(operator, this);
    };
    Observable.prototype.forEach = function (nextHandler, subscription) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var result;
            var completed = false;
            var errored = false;
            var innerSub = _this.subscribe({
                next: function (value) {
                    result = userFunction_1.tryUserFunction(nextHandler, [value]);
                    if (userFunction_1.resultIsError(result)) {
                        errored = true;
                        reject(result.error);
                    }
                },
                error: function (err) {
                    errored = true;
                    reject(err);
                },
                complete: function () {
                    completed = true;
                    resolve(result);
                }
            });
            if (subscription) {
                subscription.add(function () {
                    if (!completed && !errored) {
                        var error = new Error('forEach aborted');
                        error.name = 'AbortError';
                        reject(error);
                    }
                });
                subscription.add(innerSub);
            }
        });
    };
    Observable.prototype.toPromise = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var _last;
            _this.subscribe({
                next: function (value) { _last = value; },
                error: function (err) { reject(err); },
                complete: function () { resolve(_last); }
            });
        });
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * ### Example
     * ```ts
     * import { interval } from 'rxjs';
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     * ```
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeArray(operations)(this);
    };
    return Observable;
}());
exports.Observable = Observable;
var LiftedObservable = /** @class */ (function (_super) {
    __extends(LiftedObservable, _super);
    function LiftedObservable(_operator, _source) {
        var _this = _super.call(this) || this;
        _this._operator = _operator;
        _this._source = _source;
        return _this;
    }
    LiftedObservable.prototype._init = function (mut) {
        this._operator.call(mut, this._source);
    };
    return LiftedObservable;
}(Observable));
//# sourceMappingURL=Observable.js.map