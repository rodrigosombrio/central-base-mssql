"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("./test_helpers/assertDeepEquals");
var isSubjectLike_1 = require("./util/isSubjectLike");
/** @test {Subject} */
describe('Subject', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    it('should pump values right on through itself', function (done) {
        var subject = new rxjs_1.Subject();
        var expected = ['foo', 'bar'];
        subject.subscribe({
            next: function (x) {
                chai_1.expect(x).to.equal(expected.shift());
            },
            complete: done,
        });
        subject.next('foo');
        subject.next('bar');
        subject.complete();
    });
    it('should pump values to multiple subscribers', function () {
        var subject = new rxjs_1.Subject();
        var expected = ['foo', 'bar'];
        var i = 0;
        var j = 0;
        subject.subscribe(function (x) {
            chai_1.expect(x).to.equal(expected[i++]);
        });
        subject.subscribe(function (x) {
            chai_1.expect(x).to.equal(expected[j++]);
        });
        subject.next('foo');
        subject.next('bar');
        subject.complete();
    });
    it('should handle subscribers that arrive and leave at different times, ' +
        'subject does not complete', function () {
        var subject = new rxjs_1.Subject();
        var results1 = [];
        var results2 = [];
        var results3 = [];
        subject.next(1);
        subject.next(2);
        subject.next(3);
        subject.next(4);
        var subscription1 = subject.subscribe({
            next: function (x) { return results1.push(x); },
            error: function () { return results1.push('E'); },
            complete: function () { return results1.push('C'); },
        });
        subject.next(5);
        var subscription2 = subject.subscribe({
            next: function (x) { return results2.push(x); },
            error: function () { return results2.push('E'); },
            complete: function () { return results2.push('C'); },
        });
        subject.next(6);
        subject.next(7);
        subscription1.unsubscribe();
        subject.next(8);
        subscription2.unsubscribe();
        subject.next(9);
        subject.next(10);
        var subscription3 = subject.subscribe({
            next: function (x) { return results3.push(x); },
            error: function () { return results3.push('E'); },
            complete: function () { return results3.push('C'); },
        });
        subject.next(11);
        subscription3.unsubscribe();
        chai_1.expect(results1).to.deep.equal([5, 6, 7]);
        chai_1.expect(results2).to.deep.equal([6, 7, 8]);
        chai_1.expect(results3).to.deep.equal([11]);
    });
    it('should handle subscribers that arrive and leave at different times, ' +
        'subject completes', function () {
        var subject = new rxjs_1.Subject();
        var results1 = [];
        var results2 = [];
        var results3 = [];
        subject.next(1);
        subject.next(2);
        subject.next(3);
        subject.next(4);
        var subscription1 = subject.subscribe({
            next: function (x) { return results1.push(x); },
            error: function () { return results1.push('E'); },
            complete: function () { return results1.push('C'); },
        });
        subject.next(5);
        var subscription2 = subject.subscribe({
            next: function (x) { return results2.push(x); },
            error: function () { return results2.push('E'); },
            complete: function () { return results2.push('C'); },
        });
        subject.next(6);
        subject.next(7);
        subscription1.unsubscribe();
        subject.complete();
        subscription2.unsubscribe();
        var subscription3 = subject.subscribe({
            next: function (x) { return results3.push(x); },
            error: function () { return results3.push('E'); },
            complete: function () { return results3.push('C'); },
        });
        subscription3.unsubscribe();
        chai_1.expect(results1).to.deep.equal([5, 6, 7]);
        chai_1.expect(results2).to.deep.equal([6, 7, 'C']);
        chai_1.expect(results3).to.deep.equal(['C']);
    });
    it('should handle subscribers that arrive and leave at different times, ' +
        'subject terminates with an error', function () {
        var subject = new rxjs_1.Subject();
        var results1 = [];
        var results2 = [];
        var results3 = [];
        subject.next(1);
        subject.next(2);
        subject.next(3);
        subject.next(4);
        var subscription1 = subject.subscribe({
            next: function (x) { return results1.push(x); },
            error: function () { return results1.push('E'); },
            complete: function () { return results1.push('C'); },
        });
        subject.next(5);
        var subscription2 = subject.subscribe({
            next: function (x) { return results2.push(x); },
            error: function () { return results2.push('E'); },
            complete: function () { return results2.push('C'); },
        });
        subject.next(6);
        subject.next(7);
        subscription1.unsubscribe();
        subject.error(new Error('err'));
        subscription2.unsubscribe();
        var subscription3 = subject.subscribe({
            next: function (x) { return results3.push(x); },
            error: function () { return results3.push('E'); },
            complete: function () { return results3.push('C'); },
        });
        subscription3.unsubscribe();
        chai_1.expect(results1).to.deep.equal([5, 6, 7]);
        chai_1.expect(results2).to.deep.equal([6, 7, 'E']);
        chai_1.expect(results3).to.deep.equal(['E']);
    });
    it('should handle subscribers that arrive and leave at different times, ' +
        'subject completes before nexting any value', function () {
        var subject = new rxjs_1.Subject();
        var results1 = [];
        var results2 = [];
        var results3 = [];
        var subscription1 = subject.subscribe({
            next: function (x) { return results1.push(x); },
            error: function () { return results1.push('E'); },
            complete: function () { return results1.push('C'); },
        });
        var subscription2 = subject.subscribe({
            next: function (x) { return results2.push(x); },
            error: function () { return results2.push('E'); },
            complete: function () { return results2.push('C'); },
        });
        subscription1.unsubscribe();
        subject.complete();
        subscription2.unsubscribe();
        var subscription3 = subject.subscribe({
            next: function (x) { return results3.push(x); },
            error: function () { return results3.push('E'); },
            complete: function () { return results3.push('C'); },
        });
        subscription3.unsubscribe();
        chai_1.expect(results1).to.deep.equal([]);
        chai_1.expect(results2).to.deep.equal(['C']);
        chai_1.expect(results3).to.deep.equal(['C']);
    });
    it('should disallow new subscriber once subject has been disposed', function () {
        var subject = new rxjs_1.Subject();
        var results1 = [];
        var results2 = [];
        var results3 = [];
        var subscription1 = subject.subscribe({
            next: function (x) { return results1.push(x); },
            error: function () { return results1.push('E'); },
            complete: function () { return results1.push('C'); },
        });
        subject.next(1);
        subject.next(2);
        var subscription2 = subject.subscribe({
            next: function (x) { return results2.push(x); },
            error: function () { return results2.push('E'); },
            complete: function () { return results2.push('C'); },
        });
        subject.next(3);
        subject.next(4);
        subject.next(5);
        subscription1.unsubscribe();
        subscription2.unsubscribe();
        subject.unsubscribe();
        chai_1.expect(function () {
            subject.subscribe({
                next: function (x) { return results3.push(x); },
                error: function (err) {
                    chai_1.expect(false).to.equal('should not throw error: ' + err.toString());
                }
            });
        }).to.throw(rxjs_1.ObjectUnsubscribedError);
        chai_1.expect(results1).to.deep.equal([1, 2, 3, 4, 5]);
        chai_1.expect(results2).to.deep.equal([3, 4, 5]);
        chai_1.expect(results3).to.deep.equal([]);
    });
    it('should not allow values to be nexted after it is unsubscribed', function (done) {
        var subject = new rxjs_1.Subject();
        var expected = ['foo'];
        subject.subscribe(function (x) {
            chai_1.expect(x).to.equal(expected.shift());
        });
        subject.next('foo');
        subject.unsubscribe();
        chai_1.expect(function () { return subject.next('bar'); }).to.throw(rxjs_1.ObjectUnsubscribedError);
        done();
    });
    // it('should work as a function to create a FrankenSubject', () => {
    //   expect(Subject).to.be.a('function');
    //   const source = of(1, 2, 3, 4, 5);
    //   const nexts: any[] = [];
    //   const output: number[] = [];
    //   let error: any;
    //   let complete = false;
    //   let outputComplete = false;
    //   const observer = {
    //     closed: false,
    //     next: function (x: string) {
    //       nexts.push(x);
    //     },
    //     error: function (err: any) {
    //       error = err;
    //       this.closed = true;
    //     },
    //     complete: function () {
    //       complete = true;
    //       this.closed = true;
    //     }
    //   };
    //   const sub = Subject(observer, source);
    //   sub.subscribe(function (x) {
    //     output.push(x);
    //   }, null, () => {
    //     outputComplete = true;
    //   });
    //   sub.next('a');
    //   sub.next('b');
    //   sub.next('c');
    //   sub.complete();
    //   expect(nexts).to.deep.equal(['a', 'b', 'c']);
    //   expect(complete).to.be.true;
    //   expect(error).to.be.a('undefined');
    //   expect(output).to.deep.equal([1, 2, 3, 4, 5]);
    //   expect(outputComplete).to.be.true;
    // });
    // it('should have a static create function that works also to raise errors', () => {
    //   expect(Subject).to.be.a('function');
    //   const source = of(1, 2, 3, 4, 5);
    //   const nexts: number[] = [];
    //   const output: number[] = [];
    //   let error: any;
    //   let complete = false;
    //   let outputComplete = false;
    //   const destination = {
    //     closed: false,
    //     next: function (x: number) {
    //       nexts.push(x);
    //     },
    //     error: function (err: any) {
    //       error = err;
    //       this.closed = true;
    //     },
    //     complete: function () {
    //       complete = true;
    //       this.closed = true;
    //     }
    //   };
    //   const sub = Subject(destination, source);
    //   sub.subscribe(function (x: number) {
    //     output.push(x);
    //   }, null, () => {
    //     outputComplete = true;
    //   });
    //   sub.next(1);
    //   sub.next(2);
    //   sub.next(3);
    //   sub.error('boom');
    //   expect(nexts).to.deep.equal([1, 2, 3]);
    //   expect(complete).to.be.false;
    //   expect(error).to.equal('boom');
    //   expect(output).to.deep.equal([1, 2, 3, 4, 5]);
    //   expect(outputComplete).to.be.true;
    // });
    it('should be an Observer which can be given to Observable.subscribe', function (done) {
        var source = rxjs_1.of(1, 2, 3, 4, 5);
        var subject = new rxjs_1.Subject();
        var expected = [1, 2, 3, 4, 5];
        subject.subscribe({
            next: function (x) {
                chai_1.expect(x).to.equal(expected.shift());
            },
            error: function () {
                done(new Error('should not be called'));
            },
            complete: done,
        });
        source.subscribe(subject);
    });
    it('should throw ObjectUnsubscribedError when emit after unsubscribed', function () {
        var subject = new rxjs_1.Subject();
        subject.unsubscribe();
        chai_1.expect(function testNext() {
            subject.next('a');
        }).to.throw(rxjs_1.ObjectUnsubscribedError);
        chai_1.expect(function testError() {
            subject.error('a');
        }).to.throw(rxjs_1.ObjectUnsubscribedError);
        chai_1.expect(function testComplete() {
            subject.complete();
        }).to.throw(rxjs_1.ObjectUnsubscribedError);
    });
    it('should not next after completed', function () {
        var subject = new rxjs_1.Subject();
        var results = [];
        subject.subscribe({
            next: function (x) { return results.push(x); },
            complete: function () { return results.push('C'); },
        });
        subject.next('a');
        subject.complete();
        subject.next('b');
        chai_1.expect(results).to.deep.equal(['a', 'C']);
    });
    it('should not next after error', function () {
        var error = new Error('wut?');
        var subject = new rxjs_1.Subject();
        var results = [];
        subject.subscribe({
            next: function (x) { return results.push(x); },
            error: function (err) { return results.push(err); },
        });
        subject.next('a');
        subject.error(error);
        subject.next('b');
        chai_1.expect(results).to.deep.equal(['a', error]);
    });
    describe('asObservable', function () {
        it('should hide subject', function () {
            var subject = new rxjs_1.Subject();
            var observable = subject.asObservable();
            chai_1.expect(subject).not.to.equal(observable);
            chai_1.expect(rxjs_1.isObservable(observable)).to.be.true;
            chai_1.expect(isSubjectLike_1.isSubjectLike(observable)).to.be.false;
        });
        it('should handle subject never emits', function () {
            testScheduler.run(function (_a) {
                var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
                var observable = hot('-').asObservable();
                expectObservable(observable).toBe('-');
            });
        });
        it('should handle subject completes without emits', function () {
            testScheduler.run(function (_a) {
                var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
                var observable = hot('--^--|').asObservable();
                var expected = '---|';
                expectObservable(observable).toBe(expected);
            });
        });
        it('should handle subject throws', function () {
            testScheduler.run(function (_a) {
                var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
                var observable = hot('--^--#').asObservable();
                var expected = '---#';
                expectObservable(observable).toBe(expected);
            });
        });
        it('should handle subject emits', function () {
            testScheduler.run(function (_a) {
                var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
                var observable = hot('--^--x--|').asObservable();
                var expected = '---x--|';
                expectObservable(observable).toBe(expected);
            });
        });
    });
});
// describe('FrankenSubject', () => {
//   it('should not be eager', () => {
//     let subscribed = false;
//     const subject = Subject(null, new Observable(observer => {
//       subscribed = true;
//       const subscription = of('x').subscribe(observer);
//       return () => {
//         subscription.unsubscribe();
//       };
//     }));
//     const observable = subject.asObservable();
//     expect(subscribed).to.be.false;
//     observable.subscribe();
//     expect(subscribed).to.be.true;
//   });
// });
//# sourceMappingURL=Subject-spec.js.map