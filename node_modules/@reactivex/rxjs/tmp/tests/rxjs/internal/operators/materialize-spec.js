"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var TestScheduler_1 = require("../testing/TestScheduler");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
/** @test {materialize} */
describe('materialize operator', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new TestScheduler_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('materialize')
    it('should materialize an Observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--x--y--z--|');
            var expected = '--a--b--c--(d|)';
            var values = { a: '{x}', b: '{y}', c: '{z}', d: '|' };
            var result = e1.pipe(operators_1.materialize(), operators_1.map(function (x) {
                if (x.kind === 'C') {
                    return '|';
                }
                else {
                    return '{' + x.value + '}';
                }
            }));
            expectObservable(result).toBe(expected, values);
        });
    });
    it('should materialize a happy stream', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c--|');
            var e1subs = '^          !';
            var expected = '--w--x--y--(z|)';
            var expectedValue = {
                w: rxjs_1.Notification.createNext('a'),
                x: rxjs_1.Notification.createNext('b'),
                y: rxjs_1.Notification.createNext('c'),
                z: rxjs_1.Notification.createComplete()
            };
            expectObservable(e1.pipe(operators_1.materialize())).toBe(expected, expectedValue);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should materialize a sad stream', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c--#');
            var e1subs = '^          !';
            var expected = '--w--x--y--(z|)';
            var expectedValue = {
                w: rxjs_1.Notification.createNext('a'),
                x: rxjs_1.Notification.createNext('b'),
                y: rxjs_1.Notification.createNext('c'),
                z: rxjs_1.Notification.createError('error')
            };
            expectObservable(e1.pipe(operators_1.materialize())).toBe(expected, expectedValue);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should allow unsubscribing explicitly and early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c--|');
            var unsub = '^-----!     ';
            var e1subs = '^     !     ';
            var expected = '--w--x-     ';
            var expectedValue = {
                w: rxjs_1.Notification.createNext('a'),
                x: rxjs_1.Notification.createNext('b')
            };
            expectObservable(e1.pipe(operators_1.materialize()), unsub).toBe(expected, expectedValue);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not break unsubscription chains when result is unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--c--|');
            var e1subs = '^     !     ';
            var expected = '--w--x-     ';
            var unsub = '^-----!     ';
            var expectedValue = {
                w: rxjs_1.Notification.createNext('a'),
                x: rxjs_1.Notification.createNext('b')
            };
            var result = e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.materialize(), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected, expectedValue);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should materialize stream does not completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('-');
            var e1subs = '^';
            var expected = '-';
            expectObservable(e1.pipe(operators_1.materialize())).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should materialize stream never completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var expected = '-';
            expectObservable(e1.pipe(operators_1.materialize())).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should materialize stream does not emit', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('----|');
            var e1subs = '^   !';
            var expected = '----(x|)';
            expectObservable(e1.pipe(operators_1.materialize())).toBe(expected, { x: rxjs_1.Notification.createComplete() });
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should materialize empty stream', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var expected = '(x|)';
            expectObservable(e1.pipe(operators_1.materialize())).toBe(expected, { x: rxjs_1.Notification.createComplete() });
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should materialize stream throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '(x|)';
            expectObservable(e1.pipe(operators_1.materialize())).toBe(expected, { x: rxjs_1.Notification.createError('error') });
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
});
//# sourceMappingURL=materialize-spec.js.map