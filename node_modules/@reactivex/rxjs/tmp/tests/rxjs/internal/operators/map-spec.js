"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {map} */
describe('map operator', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('map(x => 10 * x)')
    it('should map multiple values', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('--1--2--3--|');
            var asubs = '^          !';
            var expected = '--x--y--z--|';
            var r = a.pipe(operators_1.map(function (x) { return 10 * (+x); }));
            expectObservable(r).toBe(expected, { x: 10, y: 20, z: 30 });
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should map one value', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('--x--|', { x: 42 });
            var asubs = '^    !';
            var expected = '--y--|';
            var r = a.pipe(operators_1.map(function (x) { return x + '!'; }));
            expectObservable(r).toBe(expected, { y: '42!' });
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should map multiple values', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('--1--2--3--|');
            var asubs = '^          !';
            var expected = '--x--y--z--|';
            var r = a.pipe(operators_1.map(function (x) { return x + '!'; }));
            expectObservable(r).toBe(expected, { x: '1!', y: '2!', z: '3!' });
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should propagate errors from map function', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('--x--|', { x: 42 });
            var asubs = '^ !   ';
            var expected = '--#   ';
            var r = a.pipe(operators_1.map(function (x) {
                throw 'too bad';
            }));
            expectObservable(r).toBe(expected, null, 'too bad');
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should propagate errors from observable that emits only errors', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('#');
            var asubs = '(^!)';
            var expected = '#';
            var r = a.pipe(operators_1.map(rxjs_1.identity));
            expectObservable(r).toBe(expected);
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should propagate errors from observable that emit values', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('--a--b--#', { a: 1, b: 2 }, 'too bad');
            var asubs = '^       !';
            var expected = '--x--y--#';
            var r = a.pipe(operators_1.map(function (x) { return x + '!'; }));
            expectObservable(r).toBe(expected, { x: '1!', y: '2!' }, 'too bad');
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should not map an empty observable', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('|');
            var asubs = '(^!)';
            var expected = '|';
            var invoked = 0;
            var r = a.pipe(operators_1.map(function (x) { invoked++; return x; }), operators_1.tap({
                complete: function () { return chai_1.expect(invoked).to.equal(0); }
            }));
            expectObservable(r).toBe(expected);
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should allow unsubscribing explicitly and early', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('--1--2--3--|');
            var unsub = '^-----!     ';
            var asubs = '^     !     ';
            var expected = '--x--y-     ';
            var r = a.pipe(operators_1.map(function (x) { return x + '!'; }));
            expectObservable(r, unsub).toBe(expected, { x: '1!', y: '2!' });
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should map with index', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = hot('-5-^-4--3---2----1--|');
            var asubs = '^                !';
            var expected = '--a--b---c----d--|';
            var values = { a: 5, b: 14, c: 23, d: 32 };
            var invoked = 0;
            var r = a.pipe(operators_1.map(function (x, index) {
                invoked++;
                return (parseInt(x) + 1) + (index * 10);
            }), operators_1.tap({ complete: function () { return chai_1.expect(invoked).to.equal(4); } }));
            expectObservable(r).toBe(expected, values);
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should map with index until completed', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = hot('-5-^-4--3---2----1--|');
            var asubs = '^                !';
            var expected = '--a--b---c----d--|';
            var values = { a: 5, b: 14, c: 23, d: 32 };
            var invoked = 0;
            var r = a.pipe(operators_1.map(function (x, index) {
                invoked++;
                return (parseInt(x) + 1) + (index * 10);
            }), operators_1.tap({ complete: function () { return chai_1.expect(invoked).to.equal(4); } }));
            expectObservable(r).toBe(expected, values);
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should map with index until an error occurs', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = hot('-5-^-4--3---2----1--#', undefined, 'too bad');
            var asubs = '^                !';
            var expected = '--a--b---c----d--#';
            var values = { a: 5, b: 14, c: 23, d: 32 };
            var invoked = 0;
            var r = a.pipe(operators_1.map(function (x, index) {
                invoked++;
                return (parseInt(x) + 1) + (index * 10);
            }), operators_1.tap({ complete: function () { return chai_1.expect(invoked).to.equal(4); } }));
            expectObservable(r).toBe(expected, values, 'too bad');
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should map twice', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = hot('-0----1-^-2---3--4-5--6--7-8-|');
            var asubs = '^                    !';
            var expected = '--a---b--c-d--e--f-g-|';
            var values = { a: 2, b: 3, c: 4, d: 5, e: 6, f: 7, g: 8 };
            var invoked1 = 0;
            var invoked2 = 0;
            var r = a.pipe(operators_1.map(function (x) { invoked1++; return parseInt(x) * 2; }), operators_1.map(function (x) { invoked2++; return x / 2; }), operators_1.tap({
                complete: function () {
                    chai_1.expect(invoked1).to.equal(7);
                    chai_1.expect(invoked2).to.equal(7);
                }
            }));
            expectObservable(r).toBe(expected, values);
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
    it('should not break unsubscription chain when unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('--1--2--3--|');
            var unsub = '^-----!     ';
            var asubs = '^     !     ';
            var expected = '--x--y-     ';
            var r = a.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.map(function (x) { return x + '!'; }), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(r, unsub).toBe(expected, { x: '1!', y: '2!' });
            expectSubscriptionsTo(a).toBe(asubs);
        });
    });
});
//# sourceMappingURL=map-spec.js.map