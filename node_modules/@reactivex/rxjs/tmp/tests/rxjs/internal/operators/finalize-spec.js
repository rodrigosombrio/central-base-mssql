"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var operators_1 = require("rxjs/operators");
var testing_1 = require("rxjs/testing");
var rxjs_1 = require("rxjs");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
/** @test {finalize} */
describe('finalize operator', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    it('should call finalize after complete', function (done) {
        var completed = false;
        rxjs_1.of(1, 2, 3).pipe(operators_1.finalize(function () {
            chai_1.expect(completed).to.be.true;
            done();
        })).subscribe({
            complete: function () {
                completed = true;
            }
        });
    });
    it('should call finalize after error', function (done) {
        var thrown = false;
        rxjs_1.of(1, 2, 3).pipe(operators_1.map(function (x) {
            if (x === 3) {
                throw x;
            }
            return x;
        }), operators_1.finalize(function () {
            chai_1.expect(thrown).to.be.true;
            done();
        })).subscribe({
            error: function () {
                thrown = true;
            }
        });
    });
    it('should call finalize upon disposal', function (done) {
        var disposed = false;
        var subscription = rxjs_1.timer(100).pipe(operators_1.finalize(function () {
            chai_1.expect(disposed).to.be.true;
            done();
        })).subscribe();
        disposed = true;
        subscription.unsubscribe();
    });
    it('should call finalize when synchronously subscribing to and unsubscribing ' +
        'from a shared Observable', function (done) {
        rxjs_1.interval(50).pipe(operators_1.finalize(done), operators_1.share()).subscribe().unsubscribe();
    });
    it('should call two finalize instances in succession on a shared Observable', function (done) {
        var invoked = 0;
        function checkFinally() {
            invoked += 1;
            if (invoked === 2) {
                done();
            }
        }
        rxjs_1.of(1, 2, 3).pipe(operators_1.finalize(checkFinally), operators_1.finalize(checkFinally), operators_1.share()).subscribe();
    });
    it('should handle empty', function () {
        var executed = false;
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo, flush = _a.flush;
            var s1 = hot('|');
            var result = s1.pipe(operators_1.finalize(function () { return executed = true; }));
            var expected = '|';
            expectObservable(result).toBe(expected);
        });
        chai_1.expect(executed).to.be.true;
    });
    it('should handle never', function () {
        var executed = false;
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo, flush = _a.flush;
            var s1 = hot('-');
            var result = s1.pipe(operators_1.finalize(function () { return executed = true; }));
            var expected = '-';
            expectObservable(result).toBe(expected);
        });
        chai_1.expect(executed).to.be.false;
    });
    it('should handle throw', function () {
        var executed = false;
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo, flush = _a.flush;
            var s1 = hot('#');
            var result = s1.pipe(operators_1.finalize(function () { return executed = true; }));
            var expected = '#';
            expectObservable(result).toBe(expected);
        });
        chai_1.expect(executed).to.be.true;
    });
    it('should handle basic hot observable', function () {
        var executed = false;
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo, flush = _a.flush;
            var s1 = hot('--a--b--c--|');
            var subs = '^          !';
            var expected = '--a--b--c--|';
            var result = s1.pipe(operators_1.finalize(function () { return executed = true; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(s1).toBe(subs);
        });
        chai_1.expect(executed).to.be.true;
    });
    it('should handle basic cold observable', function () {
        var executed = false;
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo, flush = _a.flush;
            var s1 = cold('--a--b--c--|');
            var subs = '^          !';
            var expected = '--a--b--c--|';
            var result = s1.pipe(operators_1.finalize(function () { return executed = true; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(s1).toBe(subs);
        });
        chai_1.expect(executed).to.be.true;
    });
    it('should handle basic error', function () {
        var executed = false;
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo, flush = _a.flush;
            var s1 = hot('--a--b--c--#');
            var subs = '^          !';
            var expected = '--a--b--c--#';
            var result = s1.pipe(operators_1.finalize(function () { return executed = true; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(s1).toBe(subs);
        });
        chai_1.expect(executed).to.be.true;
    });
    it('should handle unsubscription', function () {
        var executed = false;
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo, flush = _a.flush;
            var s1 = hot('--a--b--c--|');
            var subs = '^     !     ';
            var expected = '--a--b-';
            var unsub = '^-----!';
            var result = s1.pipe(operators_1.finalize(function () { return executed = true; }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(s1).toBe(subs);
        });
        chai_1.expect(executed).to.be.true;
    });
});
//# sourceMappingURL=finalize-spec.js.map