"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {takeLast} */
describe('takeLast operator', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    // asDiagram('takeLast(2)')
    it('should take two values of an observable with many values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a-----b----c---d--|    ');
            var e1subs = '^                   !    ';
            var expected = '--------------------(cd|)';
            expectObservable(e1.pipe(operators_1.takeLast(2))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take last three values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a-----b----c---d--|    ');
            var e1subs = '^                   !    ';
            var expected = '--------------------(bcd|)';
            expectObservable(e1.pipe(operators_1.takeLast(3))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take all element when try to take larger then source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a-----b----c---d--|    ');
            var e1subs = '^                   !    ';
            var expected = '--------------------(abcd|)';
            expectObservable(e1.pipe(operators_1.takeLast(5))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take all element when try to take exact', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a-----b----c---d--|    ');
            var e1subs = '^                   !    ';
            var expected = '--------------------(abcd|)';
            expectObservable(e1.pipe(operators_1.takeLast(4))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not take any values if zero is passed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a-----b----c---d--|');
            var expected = '|';
            expectObservable(e1.pipe(operators_1.takeLast(0))).toBe(expected);
        });
    });
    it('should work with empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var expected = '|';
            expectObservable(e1.pipe(operators_1.takeLast(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should go on forever on never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var expected = '-';
            expectObservable(e1.pipe(operators_1.takeLast(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should be empty on takeLast(0)', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b----c---d--|');
            var e1subs = []; // Don't subscribe at all
            var expected = '|';
            expectObservable(e1.pipe(operators_1.takeLast(0))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take one value from an observable with one value', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---(a|)');
            var e1subs = '^  !   ';
            var expected = '---(a|)';
            expectObservable(e1.pipe(operators_1.takeLast(1))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take one value from an observable with many values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b----c---d--|   ');
            var e1subs = '^              !   ';
            var expected = '---------------(d|)';
            expectObservable(e1.pipe(operators_1.takeLast(1))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should error on empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^----|');
            var e1subs = '^    !';
            var expected = '-----|';
            expectObservable(e1.pipe(operators_1.takeLast(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should propagate error from the source observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^---#', null, 'too bad');
            var e1subs = '^   !';
            var expected = '----#';
            expectObservable(e1.pipe(operators_1.takeLast(42))).toBe(expected, null, 'too bad');
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should propagate error from an observable with values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^--a--b--#');
            var e1subs = '^        !';
            var expected = '---------#';
            expectObservable(e1.pipe(operators_1.takeLast(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should allow unsubscribing explicitly and early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^--a--b-----c--d--e--|');
            var unsub = '         !            ';
            var e1subs = '^        !            ';
            var expected = '----------            ';
            expectObservable(e1.pipe(operators_1.takeLast(42)), unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should work with throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '#';
            expectObservable(e1.pipe(operators_1.takeLast(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    // TODO(benlesh): uncomment
    // it('should throw if total is less than zero', () => {
    //   expect(() => { range(0, 10).pipe(takeLast(-1)); })
    //     .to.throw(ArgumentOutOfRangeError);
    // });
    it('should not break unsubscription chain when unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^--a--b-----c--d--e--|');
            var unsub = '         !            ';
            var e1subs = '^        !            ';
            var expected = '----------            ';
            var result = e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.takeLast(42), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
});
//# sourceMappingURL=takeLast-spec.js.map