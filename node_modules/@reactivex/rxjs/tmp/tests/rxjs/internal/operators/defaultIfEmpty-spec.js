"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("rxjs/testing");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {defaultIfEmpty} */
describe('defaultIfEmpty', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    // asDiagram('defaultIfEmpty(42)')
    it('should emit the default value if the source Observable is empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--------|');
            var expected = '--------(x|)';
            expectObservable(e1.pipe(operators_1.defaultIfEmpty(42))).toBe(expected, { x: 42 });
        });
    });
    it('should return the argument if Observable is empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var expected = '(x|)';
            expectObservable(e1.pipe(operators_1.defaultIfEmpty('x'))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should return null if the Observable is empty and no arguments', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var expected = '(x|)';
            expectObservable(e1.pipe(operators_1.defaultIfEmpty())).toBe(expected, { x: null });
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should return the Observable if not empty with a default value', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--|');
            var e1subs = '^       !';
            var expected = '--a--b--|';
            expectObservable(e1.pipe(operators_1.defaultIfEmpty('x'))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should return the Observable if not empty with no default value', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--|');
            var e1subs = '^       !';
            var expected = '--a--b--|';
            expectObservable(e1.pipe(operators_1.defaultIfEmpty())).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should allow unsubscribing early and explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--|');
            var e1subs = '^   !    ';
            var expected = '--a--    ';
            var unsub = '^---!    ';
            var result = e1.pipe(operators_1.defaultIfEmpty('x'));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not break unsubscription chains when unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--b--|');
            var e1subs = '^   !    ';
            var expected = '--a--    ';
            var unsub = '^---!    ';
            var result = e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.defaultIfEmpty('x'), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should error if the Observable errors', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '#';
            expectObservable(e1.pipe(operators_1.defaultIfEmpty('x'))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
});
//# sourceMappingURL=defaultIfEmpty-spec.js.map