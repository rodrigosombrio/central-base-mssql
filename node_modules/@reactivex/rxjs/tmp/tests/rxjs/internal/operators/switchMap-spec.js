"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {switchMap} */
describe('switchMap', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('switchMap(i => 10*i\u2014\u201410*i\u2014\u201410*i\u2014| )')
    it('should map-and-flatten each item to an Observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--1-----3--5-------|');
            var e1subs = '^                  !';
            var e2 = cold('x-x-x|              ', { x: 10 });
            var expected = '--x-x-x-y-yz-z-z---|';
            var values = { x: 10, y: 30, z: 50 };
            var result = e1.pipe(operators_1.switchMap(function (x) { return e2.pipe(operators_1.map(function (i) { return i * +x; })); }));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should unsub inner observables', function () {
        var unsubbed = [];
        rxjs_1.of('a', 'b').pipe(operators_1.switchMap(function (x) {
            return new rxjs_1.Observable(function (subscriber) {
                subscriber.complete();
                return function () {
                    unsubbed.push(x);
                };
            });
        })).subscribe();
        chai_1.expect(unsubbed).to.deep.equal(['a', 'b']);
    });
    it('should switch inner cold observables', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('--a--b--c--d--e--|           ');
            var xsubs = '         ^         !                  ';
            var y = cold('---f---g---h---i--|');
            var ysubs = '                   ^                 !';
            var e1 = hot('---------x---------y---------|        ');
            var e1subs = '^                            !        ';
            var expected = '-----------a--b--c----f---g---h---i--|';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should raise error when projection throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('-------x-----y---|');
            var e1subs = '^      !          ';
            var expected = '-------#          ';
            function project() {
                throw 'error';
            }
            expectObservable(e1.pipe(operators_1.switchMap(project))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should switch inner cold observables, outer is unsubscribed early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('--a--b--c--d--e--|           ');
            var xsubs = '         ^         !                  ';
            var y = cold('---f---g---h---i--|');
            var ysubs = '                   ^ !                ';
            var e1 = hot('---------x---------y---------|        ');
            var e1subs = '^                    !                ';
            var unsub = '^--------------------!                ';
            var expected = '-----------a--b--c----                ';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not break unsubscription chains when result is unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('--a--b--c--d--e--|           ');
            var xsubs = '         ^         !                  ';
            var y = cold('---f---g---h---i--|');
            var ysubs = '                   ^ !                ';
            var e1 = hot('---------x---------y---------|        ');
            var e1subs = '^                    !                ';
            var expected = '-----------a--b--c----                ';
            var unsub = '^--------------------!                ';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.switchMap(function (value) { return observableLookup[value]; }), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should stop listening to a synchronous observable when unsubscribed', function () {
        var sideEffects = [];
        var synchronousObservable = rxjs_1.concat(rxjs_1.defer(function () {
            sideEffects.push(1);
            return rxjs_1.of(1);
        }), rxjs_1.defer(function () {
            sideEffects.push(2);
            debugger;
            return rxjs_1.of(2);
        }), rxjs_1.defer(function () {
            sideEffects.push(3);
            debugger;
            return rxjs_1.of(3);
        }));
        rxjs_1.of(null).pipe(operators_1.switchMap(function () { return synchronousObservable; }), operators_1.takeWhile(function (x) { return x != 2; }) // unsubscribe at the second side-effect
        ).subscribe(function () { });
        chai_1.expect(sideEffects).to.deep.equal([1, 2]);
    });
    it('should switch inner cold observables, inner never completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('--a--b--c--d--e--|          ');
            var xsubs = '         ^         !                 ';
            var y = cold('---f---g---h---i--');
            var ysubs = '                   ^                 ';
            var e1 = hot('---------x---------y---------|       ');
            var e1subs = '^                            !       ';
            var expected = '-----------a--b--c----f---g---h---i--';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should handle a synchronous switch to the second inner observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('--a--b--c--d--e--|   ');
            var xsubs = '         (^!)                 ';
            var y = cold('---f---g---h---i--|  ');
            var ysubs = '         ^                 !  ';
            var e1 = hot('---------(xy)----------------|');
            var e1subs = '^                            !';
            var expected = '------------f---g---h---i----|';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should switch inner cold observables, one inner throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('--a--b--#--d--e--|          ');
            var xsubs = '         ^       !                   ';
            var y = cold('---f---g---h---i--');
            var ysubs = [];
            var e1 = hot('---------x---------y---------|       ');
            var e1subs = '^                !                   ';
            var expected = '-----------a--b--#                   ';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should switch inner hot observables', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = hot('-----a--b--c--d--e--|                 ');
            var xsubs = '         ^         !                  ';
            var y = hot('--p-o-o-p-------------f---g---h---i--|');
            var ysubs = '                   ^                 !';
            var e1 = hot('---------x---------y---------|        ');
            var e1subs = '^                            !        ';
            var expected = '-----------c--d--e----f---g---h---i--|';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should switch inner empty and empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('|');
            var y = cold('|');
            var xsubs = '         (^!)                 ';
            var ysubs = '                   (^!)       ';
            var e1 = hot('---------x---------y---------|');
            var e1subs = '^                            !';
            var expected = '-----------------------------|';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should switch inner empty and never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('|');
            var y = cold('-');
            var xsubs = '         (^!)                 ';
            var ysubs = '                   ^          ';
            var e1 = hot('---------x---------y---------|');
            var e1subs = '^                            !';
            var expected = '------------------------------';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should switch inner never and empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('-');
            var y = cold('|');
            var xsubs = '         ^         !          ';
            var ysubs = '                   (^!)       ';
            var e1 = hot('---------x---------y---------|');
            var e1subs = '^                            !';
            var expected = '-----------------------------|';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should switch inner never and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('-');
            var y = cold('#', null, 'sad');
            var xsubs = '         ^         !          ';
            var ysubs = '                   (^!)       ';
            var e1 = hot('---------x---------y---------|');
            var e1subs = '^                  !          ';
            var expected = '-------------------#          ';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected, undefined, 'sad');
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should switch inner empty and throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('|');
            var y = cold('#', null, 'sad');
            var xsubs = '         (^!)                 ';
            var ysubs = '                   (^!)       ';
            var e1 = hot('---------x---------y---------|');
            var e1subs = '^                  !          ';
            var expected = '-------------------#          ';
            var observableLookup = { x: x, y: y };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected, undefined, 'sad');
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(y).toBe(ysubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should handle outer empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var expected = '|';
            var result = e1.pipe(operators_1.switchMap(function (value) { return rxjs_1.of(value); }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should handle outer never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var expected = '-';
            var result = e1.pipe(operators_1.switchMap(function (value) { return rxjs_1.of(value); }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should handle outer throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '#';
            var result = e1.pipe(operators_1.switchMap(function (value) { return rxjs_1.of(value); }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should handle outer error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var x = cold('--a--b--c--d--e--|');
            var xsubs = '         ^         !       ';
            var e1 = hot('---------x---------#       ');
            var e1subs = '^                  !       ';
            var expected = '-----------a--b--c-#       ';
            var observableLookup = { x: x };
            var result = e1.pipe(operators_1.switchMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(x).toBe(xsubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
});
//# sourceMappingURL=switchMap-spec.js.map