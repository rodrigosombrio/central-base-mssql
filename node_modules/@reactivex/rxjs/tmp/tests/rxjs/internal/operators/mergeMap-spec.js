"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var chai_1 = require("chai");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
describe('mergeMap', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(function (a, b) { chai_1.expect(a).to.deep.equal(b); });
    });
    it('should work in the basic use case', function () {
        var results = [];
        rxjs_1.of(1, 2, 3).pipe(operators_1.mergeMap(function (n, i) { return rxjs_1.of([n, i]); }))
            .subscribe({
            next: function (value) { results.push(value); },
            complete: function () { results.push('done'); },
        });
        chai_1.expect(results).to.deep.equal([
            [1, 0],
            [2, 1],
            [3, 2],
            'done',
        ]);
    });
    it('should send errors in the projection function to the subscriber', function () {
        var results = [];
        var error;
        rxjs_1.of(1, 2, 3).pipe(operators_1.mergeMap(function (n, i) {
            if (n === 2) {
                throw new Error('bad');
            }
            return rxjs_1.of([n, i]);
        }))
            .subscribe({
            next: function (value) { results.push(value); },
            error: function (err) { error = err; },
            complete: function () { results.push('done'); },
        });
        chai_1.expect(results).to.deep.equal([
            [1, 0]
        ]);
        chai_1.expect(error).to.be.an.instanceof(Error);
        chai_1.expect(error.message).to.equal('bad');
    });
    it('should handle early unsubscribe', function () {
        var results = [];
        rxjs_1.of(1, 2, 3).pipe(operators_1.mergeMap(function (n) { return rxjs_1.of(n); }))
            .subscribe({
            next: function (value, subscription) {
                results.push(value);
                if (value === 2) {
                    subscription.unsubscribe();
                }
            },
            complete: function () { results.push('done'); },
        });
        chai_1.expect(results).to.deep.equal([
            1,
            2,
        ]);
    });
    //asDiagram('mergeMap(i => 10*i\u2014\u201410*i\u2014\u201410*i\u2014| )')
    it('should map-and-flatten each item to an Observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--1-----3--5-------|');
            var e1subs = '^                  !';
            var e2 = cold('x-x-x|              ', { x: 10 });
            var expected = '--x-x-x-y-yzyz-z---|';
            var values = { x: 10, y: 30, z: 50 };
            var result = e1.pipe(operators_1.mergeMap(function (x) { return e2.pipe(operators_1.map(function (i) { return i * +x; })); }));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many regular interval inners', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('----a---a---a---(a|)                    ');
            var b = cold('----b---b---(b|)                    ');
            var c = cold('----c---c---c---c---(c|)');
            var d = cold('----(d|)        ');
            var e1 = hot('a---b-----------c-------d-------|       ');
            var e1subs = '^                               !       ';
            var expected = '----a---(ab)(ab)(ab)c---c---(cd)c---(c|)';
            var observableLookup = { a: a, b: b, c: c, d: d };
            var source = e1.pipe(operators_1.mergeMap(function (value) { return observableLookup[value]; }));
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should map values to constant resolved promises and merge', function (done) {
        var source = rxjs_1.from([4, 3, 2, 1]);
        var project = function (value) { return rxjs_1.from(Promise.resolve(42)); };
        var results = [];
        source.pipe(operators_1.mergeMap(project)).subscribe({
            next: function (x) {
                results.push(x);
            },
            error: function () {
                done(new Error('Subscriber error handler not supposed to be called.'));
            },
            complete: function () {
                chai_1.expect(results).to.deep.equal([42, 42, 42, 42]);
                done();
            }
        });
    });
    it('should map values to constant rejected promises and merge', function (done) {
        var source = rxjs_1.from([4, 3, 2, 1]);
        var project = function () {
            return rxjs_1.from(Promise.reject(42));
        };
        source.pipe(operators_1.mergeMap(project)).subscribe({
            next: function (x) {
                done(new Error('Subscriber next handler not supposed to be called.'));
            },
            error: function (err) {
                chai_1.expect(err).to.equal(42);
                done();
            },
            complete: function () {
                done(new Error('Subscriber complete handler not supposed to be called.'));
            }
        });
    });
    it('should map values to resolved promises and merge', function (done) {
        var source = rxjs_1.from([4, 3, 2, 1]);
        var project = function (value, index) {
            return rxjs_1.from(Promise.resolve(value + index));
        };
        var results = [];
        source.pipe(operators_1.mergeMap(project)).subscribe({
            next: function (x) {
                results.push(x);
            },
            error: function () {
                done(new Error('Subscriber error handler not supposed to be called.'));
            },
            complete: function () {
                chai_1.expect(results).to.deep.equal([4, 4, 4, 4]);
                done();
            }
        });
    });
    it('should map values to rejected promises and merge', function (done) {
        var source = rxjs_1.from([4, 3, 2, 1]);
        var project = function (value, index) {
            return rxjs_1.from(Promise.reject('' + value + '-' + index));
        };
        source.pipe(operators_1.mergeMap(project)).subscribe({
            next: function () {
                done(new Error('Subscriber next handler not supposed to be called.'));
            },
            error: function (err) {
                chai_1.expect(err).to.equal('4-0');
                done();
            },
            complete: function () {
                done(new Error('Subscriber complete handler not supposed to be called.'));
            }
        });
    });
    it('should mergeMap many outer values to many inner values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c-------d-------|            ');
            var e1subs = '^                                !            ';
            var inner = cold('----i---j---k---l---|                        ', values);
            var innersubs = [' ^                   !                        ',
                '         ^                   !                ',
                '                 ^                   !        ',
                '                         ^                   !'];
            var expected = '-----i---j---(ki)(lj)(ki)(lj)(ki)(lj)k---l---|';
            var result = e1.pipe(operators_1.mergeMap(function (value) { return inner; }));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(inner).toBe(innersubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many outer to many inner, complete late', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c-------d-----------------------|');
            var e1subs = '^                                                !';
            var inner = cold('----i---j---k---l---|                            ', values);
            var expected = '-----i---j---(ki)(lj)(ki)(lj)(ki)(lj)k---l-------|';
            var result = e1.pipe(operators_1.mergeMap(function () { return inner; }));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many outer to many inner, outer never completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c-------d-------e---------------f------');
            var unsub = '^------------------------------------------------------!';
            var e1subs = '^                                                      !';
            var inner = cold('----i---j---k---l---|                                  ', values);
            var expected = '-----i---j---(ki)(lj)(ki)(lj)(ki)(lj)(ki)(lj)k---l---i--';
            var source = e1.pipe(operators_1.mergeMap(function () { return inner; }));
            expectObservable(source, unsub).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not break unsubscription chains when result is unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c-------d-------e---------------f------');
            var e1subs = '^                                                      !';
            var inner = cold('----i---j---k---l---|                                  ', values);
            var expected = '-----i---j---(ki)(lj)(ki)(lj)(ki)(lj)(ki)(lj)k---l---i--';
            var unsub = '^------------------------------------------------------!';
            var source = e1.pipe(operators_1.map(function (x) { return x; }), operators_1.mergeMap(function () { return inner; }), operators_1.map(function (x) { return x; }));
            expectObservable(source, unsub).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many outer to many inner, inner never completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c-------d-------|         ');
            var e1subs = '^                                !         ';
            var inner = cold('----i---j---k---l-------------------------', values);
            var expected = '-----i---j---(ki)(lj)(ki)(lj)(ki)(lj)k---l-';
            var result = e1.pipe(operators_1.mergeMap(function (value) { return inner; }));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many outer to many inner, and inner throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c-------d-------|');
            var e1subs = '^                        !        ';
            var inner = cold('----i---j---k---l-------#        ', values);
            var expected = '-----i---j---(ki)(lj)(ki)#        ';
            var result = e1.pipe(operators_1.mergeMap(function (value) { return inner; }));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many outer to many inner, and outer throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c-------d-------#');
            var e1subs = '^                                !';
            var inner = cold('----i---j---k---l---|            ', values);
            var expected = '-----i---j---(ki)(lj)(ki)(lj)(ki)#';
            var result = e1.pipe(operators_1.mergeMap(function (value) { return inner; }));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many outer to many inner, both inner and outer throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c-------d-------#');
            var e1subs = '^                    !            ';
            var inner = cold('----i---j---k---l---#            ', values);
            var expected = '-----i---j---(ki)(lj)#            ';
            var result = e1.pipe(operators_1.mergeMap(function (value) { return inner; }));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap to many cold Observable, with parameter concurrency=1', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c---|                                        ');
            var e1subs = '^                    !                                        ';
            var inner = cold('----i---j---k---l---|                                        ', values);
            var innersubs = [' ^                   !                                        ',
                '                     ^                   !                    ',
                '                                         ^                   !'];
            var expected = '-----i---j---k---l-------i---j---k---l-------i---j---k---l---|';
            function project() { return inner; }
            var result = e1.pipe(operators_1.mergeMap(project, 1));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(inner).toBe(innersubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap to many cold Observable, with parameter concurrency=2', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c---|                    ');
            var e1subs = '^                    !                    ';
            var inner = cold('----i---j---k---l---|                    ', values);
            var innersubs = [' ^                   !                    ',
                '         ^                   !            ',
                '                     ^                   !'];
            var expected = '-----i---j---(ki)(lj)k---(li)j---k---l---|';
            function project() { return inner; }
            var result = e1.pipe(operators_1.mergeMap(project, 2));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(inner).toBe(innersubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap to many hot Observable, with parameter concurrency=1', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c---|                                        ');
            var e1subs = '^                    !                                        ';
            var hotA = hot('x----i---j---k---l---|                                        ', values);
            var hotB = hot('-x-x-xxxx-x-x-xxxxx-x----i---j---k---l---|                    ', values);
            var hotC = hot('x-xxxx---x-x-x-x-x-xx--x--x-x--x--xxxx-x-----i---j---k---l---|', values);
            var asubs = ' ^                   !                                        ';
            var bsubs = '                     ^                   !                    ';
            var csubs = '                                         ^                   !';
            var expected = '-----i---j---k---l-------i---j---k---l-------i---j---k---l---|';
            var inners = { a: hotA, b: hotB, c: hotC };
            function project(x) { return inners[x]; }
            var result = e1.pipe(operators_1.mergeMap(project, 1));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(hotA).toBe(asubs);
            expectSubscriptionsTo(hotB).toBe(bsubs);
            expectSubscriptionsTo(hotC).toBe(csubs);
        });
    });
    it('should mergeMap to many hot Observable, with parameter concurrency=2', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c---|                    ');
            var e1subs = '^                    !                    ';
            var hotA = hot('x----i---j---k---l---|                    ', values);
            var hotB = hot('-x-x-xxxx----i---j---k---l---|            ', values);
            var hotC = hot('x-xxxx---x-x-x-x-x-xx----i---j---k---l---|', values);
            var asubs = ' ^                   !                    ';
            var bsubs = '         ^                   !            ';
            var csubs = '                     ^                   !';
            var expected = '-----i---j---(ki)(lj)k---(li)j---k---l---|';
            var inners = { a: hotA, b: hotB, c: hotC };
            function project(x) { return inners[x]; }
            var result = e1.pipe(operators_1.mergeMap(project, 2));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(hotA).toBe(asubs);
            expectSubscriptionsTo(hotB).toBe(bsubs);
            expectSubscriptionsTo(hotC).toBe(csubs);
        });
    });
    it('should mergeMap to many cold Observable, with parameter concurrency=1', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c---|                                        ');
            var e1subs = '^                    !                                        ';
            var inner = cold('----i---j---k---l---|                                        ', values);
            var innersubs = [' ^                   !                                        ',
                '                     ^                   !                    ',
                '                                         ^                   !'];
            var expected = '-----i---j---k---l-------i---j---k---l-------i---j---k---l---|';
            function project() { return inner; }
            var result = e1.pipe(operators_1.mergeMap(project, 1));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(inner).toBe(innersubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap to many cold Observable, with parameter concurrency=2', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c---|                    ');
            var e1subs = '^                    !                    ';
            var inner = cold('----i---j---k---l---|                    ', values);
            var innersubs = [' ^                   !                    ',
                '         ^                   !            ',
                '                     ^                   !'];
            var expected = '-----i---j---(ki)(lj)k---(li)j---k---l---|';
            function project() { return inner; }
            var result = e1.pipe(operators_1.mergeMap(project, 2));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(inner).toBe(innersubs);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap to many hot Observable, with parameter concurrency=1', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c---|                                        ');
            var e1subs = '^                    !                                        ';
            var hotA = hot('x----i---j---k---l---|                                        ', values);
            var hotB = hot('-x-x-xxxx-x-x-xxxxx-x----i---j---k---l---|                    ', values);
            var hotC = hot('x-xxxx---x-x-x-x-x-xx--x--x-x--x--xxxx-x-----i---j---k---l---|', values);
            var asubs = ' ^                   !                                        ';
            var bsubs = '                     ^                   !                    ';
            var csubs = '                                         ^                   !';
            var expected = '-----i---j---k---l-------i---j---k---l-------i---j---k---l---|';
            var inners = { a: hotA, b: hotB, c: hotC };
            function project(x) { return inners[x]; }
            var result = e1.pipe(operators_1.mergeMap(project, 1));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(hotA).toBe(asubs);
            expectSubscriptionsTo(hotB).toBe(bsubs);
            expectSubscriptionsTo(hotC).toBe(csubs);
        });
    });
    it('should mergeMap to many hot Observable, with parameter concurrency=2', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = { i: 'foo', j: 'bar', k: 'baz', l: 'qux' };
            var e1 = hot('-a-------b-------c---|                    ');
            var e1subs = '^                    !                    ';
            var hotA = hot('x----i---j---k---l---|                    ', values);
            var hotB = hot('-x-x-xxxx----i---j---k---l---|            ', values);
            var hotC = hot('x-xxxx---x-x-x-x-x-xx----i---j---k---l---|', values);
            var asubs = ' ^                   !                    ';
            var bsubs = '         ^                   !            ';
            var csubs = '                     ^                   !';
            var expected = '-----i---j---(ki)(lj)k---(li)j---k---l---|';
            var inners = { a: hotA, b: hotB, c: hotC };
            function project(x) { return inners[x]; }
            var result = e1.pipe(operators_1.mergeMap(project, 2));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(hotA).toBe(asubs);
            expectSubscriptionsTo(hotB).toBe(bsubs);
            expectSubscriptionsTo(hotC).toBe(csubs);
        });
    });
    it('should mergeMap many complex, where all inners are finite', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('-#');
            var b = cold('-#');
            var c = cold('-2--3--4--5------------------6-|');
            var d = cold('-----------2--3|');
            var e = cold('-1--------2--3-----4--5--------|');
            var f = cold('--|');
            var g = cold('---1-2|');
            var e1 = hot('-a-b--^-c-----d------e----------------f-----g|');
            var e1subs = '^                                      !';
            var expected = '---2--3--4--5---1--2--3--2--3--6--4--5---1-2--|';
            var observableLookup = { a: a, b: b, c: c, d: d, e: e, f: f, g: g };
            var result = e1.pipe(operators_1.mergeMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many complex, all inners finite except one', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('-#');
            var b = cold('-#');
            var c = cold('-2--3--4--5------------------6-|');
            var d = cold('-----------2--3-');
            var e = cold('-1--------2--3-----4--5--------|');
            var f = cold('--|');
            var g = cold('---1-2|');
            var e1 = hot('-a-b--^-c-----d------e----------------f-----g|');
            var e1subs = '^                                      !';
            var expected = '---2--3--4--5---1--2--3--2--3--6--4--5---1-2----';
            var observableLookup = { a: a, b: b, c: c, d: d, e: e, f: f, g: g };
            var result = e1.pipe(operators_1.mergeMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many complex, inners finite, outer does not complete', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('-#');
            var b = cold('-#');
            var c = cold('-2--3--4--5------------------6-|');
            var d = cold('-----------2--3|');
            var e = cold('-1--------2--3-----4--5--------|');
            var f = cold('--|');
            var g = cold('---1-2|');
            var e1 = hot('-a-b--^-c-----d------e----------------f-----g--------');
            var e1subs = '^                                               ';
            var expected = '---2--3--4--5---1--2--3--2--3--6--4--5---1-2----';
            var observableLookup = { a: a, b: b, c: c, d: d, e: e, f: f, g: g };
            var result = e1.pipe(operators_1.mergeMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many complex, all inners finite, and outer throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('-#');
            var b = cold('-#');
            var c = cold('-2--3--4--5------------------6-|');
            var d = cold('-----------2--3|');
            var e = cold('-1--------2--3-----4--5--------|');
            var f = cold('--|');
            var g = cold('---1-2|');
            var e1 = hot('-a-b--^-c-----d------e----------------f-----g#       ');
            var e1subs = '^                                      !       ';
            var expected = '---2--3--4--5---1--2--3--2--3--6--4--5-#       ';
            var observableLookup = { a: a, b: b, c: c, d: d, e: e, f: f, g: g };
            var result = e1.pipe(operators_1.mergeMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many complex, all inners complete except one throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('-#');
            var b = cold('-#');
            var c = cold('-2--3--4--5------------------6-#');
            var d = cold('-----------2--3|');
            var e = cold('-1--------2--3-----4--5--------|');
            var f = cold('--|');
            var g = cold('---1-2|');
            var e1 = hot('-a-b--^-c-----d------e----------------f-----g|');
            var e1subs = '^                                !             ';
            var expected = '---2--3--4--5---1--2--3--2--3--6-#             ';
            var observableLookup = { a: a, b: b, c: c, d: d, e: e, f: f, g: g };
            var result = e1.pipe(operators_1.mergeMap(function (value) { return observableLookup[value]; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many complex, all inners finite, outer is unsubscribed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('-#');
            var b = cold('-#');
            var c = cold('-2--3--4--5------------------6-|');
            var d = cold('-----------2--3|');
            var e = cold('-1--------2--3-----4--5--------|');
            var f = cold('--|');
            var g = cold('---1-2|');
            var e1 = hot('-a-b--^-c-----d------e----------------f-----g|');
            var unsub = '^-----------------------------!                ';
            var e1subs = '^                             !                ';
            var expected = '---2--3--4--5---1--2--3--2--3--                ';
            var observableLookup = { a: a, b: b, c: c, d: d, e: e, f: f, g: g };
            var source = e1.pipe(operators_1.mergeMap(function (value) { return observableLookup[value]; }));
            expectObservable(source, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many complex, all inners finite, project throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var a = cold('-#');
            var b = cold('-#');
            var c = cold('-2--3--4--5------------------6-|');
            var d = cold('-----------2--3|');
            var e = cold('-1--------2--3-----4--5--------|');
            var f = cold('--|');
            var g = cold('---1-2|');
            var e1 = hot('-a-b--^-c-----d------e----------------f-----g|');
            var e1subs = '^              !                               ';
            var expected = '---2--3--4--5--#                               ';
            var observableLookup = { a: a, b: b, c: c, d: d, e: e, f: f, g: g };
            var invoked = 0;
            var source = e1.pipe(operators_1.mergeMap(function (value) {
                invoked++;
                if (invoked === 3) {
                    throw 'error';
                }
                return observableLookup[value];
            }));
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    function arrayRepeat(value, times) {
        var results = [];
        for (var i = 0; i < times; i++) {
            results.push(value);
        }
        return results;
    }
    it('should mergeMap many outer to an array for each value', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('2-----4--------3--------2-------|');
            var e1subs = '^                               !';
            var expected = '(22)--(4444)---(333)----(22)----|';
            var source = e1.pipe(operators_1.mergeMap(function (value) { return arrayRepeat(value, +value); }));
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many outer to inner arrays, and outer throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('2-----4--------3--------2-------#');
            var e1subs = '^                               !';
            var expected = '(22)--(4444)---(333)----(22)----#';
            var source = e1.pipe(operators_1.mergeMap(function (value) { return arrayRepeat(value, +value); }));
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many outer to inner arrays, outer gets unsubscribed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('2-----4--------3--------2-------|');
            var unsub = '^------------!                   ';
            var e1subs = '^            !                   ';
            var expected = '(22)--(4444)--                   ';
            var source = e1.pipe(operators_1.mergeMap(function (value) { return arrayRepeat(value, +value); }));
            expectObservable(source, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should mergeMap many outer to inner arrays, project throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('2-----4--------3--------2-------|');
            var e1subs = '^              !                 ';
            var expected = '(22)--(4444)---#                 ';
            var invoked = 0;
            var source = e1.pipe(operators_1.mergeMap(function (value) {
                invoked++;
                if (invoked === 3) {
                    throw 'error';
                }
                return arrayRepeat(value, +value);
            }));
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should map and flatten', function () {
        var source = rxjs_1.of(1, 2, 3, 4).pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x + '!'); }));
        var expected = ['1!', '2!', '3!', '4!'];
        var completed = false;
        source.subscribe({
            next: function (x) {
                chai_1.expect(x).to.equal(expected.shift());
            }, complete: function () {
                chai_1.expect(expected.length).to.equal(0);
                completed = true;
            }
        });
        chai_1.expect(completed).to.be.true;
    });
    it('should map and flatten an Array', function () {
        var source = rxjs_1.of(1, 2, 3, 4).pipe(operators_1.mergeMap(function (x) { return [x + '!']; }));
        var expected = ['1!', '2!', '3!', '4!'];
        var completed = false;
        source.subscribe({
            next: function (x) {
                chai_1.expect(x).to.equal(expected.shift());
            }, complete: function () {
                chai_1.expect(expected.length).to.equal(0);
                completed = true;
            }
        });
        chai_1.expect(completed).to.be.true;
    });
});
//# sourceMappingURL=mergeMap-spec.js.map