"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var userFunction_1 = require("rxjs/internal/util/userFunction");
var from_1 = require("rxjs/internal/create/from");
var MutableSubscriber_1 = require("rxjs/internal/MutableSubscriber");
function mergeMap(project, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return function (source) { return source.lift(mergeMapOperator(project, concurrent)); };
}
exports.mergeMap = mergeMap;
function mergeMapOperator(project, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return function mergeMapLifted(source) {
        var mut = this;
        var _next = mut.next;
        var _complete = mut.complete;
        var _active = 0;
        var _index = 0;
        var _buffer = [];
        var _outerCompleted = false;
        var innerSubscribe = function () {
            while (_buffer.length > 0 && _active < concurrent) {
                _active++;
                var value = _buffer.shift();
                var result = userFunction_1.tryUserFunction(function (value, index) { return from_1.from(project(value, index)); }, [value, _index++]);
                if (userFunction_1.resultIsError(result)) {
                    mut.error(result.error);
                }
                else {
                    var innerMut = new MutableSubscriber_1.MutableSubscriber(_next, mut.error, function () {
                        _active--;
                        if (_buffer.length > 0) {
                            innerSubscribe();
                        }
                        else if (_outerCompleted && _active === 0) {
                            _complete();
                        }
                    });
                    mut.subscription.add(result.subscribe(innerMut));
                }
            }
        };
        mut.next = function (value) {
            _buffer.push(value);
            innerSubscribe();
        };
        mut.complete = function () {
            _outerCompleted = true;
            if (_active === 0 && _buffer.length === 0) {
                _complete();
            }
        };
        return source.subscribe(mut);
    };
}
//# sourceMappingURL=mergeMap.js.map