"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("rxjs/testing");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {scan} */
describe('scan', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('scan((acc, curr) => acc + curr, 0)')
    it('should scan', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var values = {
                a: 1, b: 3, c: 5,
                x: 1, y: 4, z: 9
            };
            var e1 = hot('--a--b--c--|', values);
            var e1subs = '^          !';
            var expected = '--x--y--z--|';
            var scanFunction = function (o, x) {
                return o + x;
            };
            expectObservable(e1.pipe(operators_1.scan(scanFunction, 0))).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should scan things', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c--d--e--f--g--|');
            var e1subs = '^                    !';
            var expected = '---u--v--w--x--y--z--|';
            var values = {
                u: ['b'],
                v: ['b', 'c'],
                w: ['b', 'c', 'd'],
                x: ['b', 'c', 'd', 'e'],
                y: ['b', 'c', 'd', 'e', 'f'],
                z: ['b', 'c', 'd', 'e', 'f', 'g']
            };
            var source = e1.pipe(operators_1.scan(function (acc, x) { return [].concat(acc, x); }, []));
            expectObservable(source).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should scan with a seed of undefined', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c--d--e--f--g--|');
            var e1subs = '^                    !';
            var expected = '---u--v--w--x--y--z--|';
            var values = {
                u: 'undefined b',
                v: 'undefined b c',
                w: 'undefined b c d',
                x: 'undefined b c d e',
                y: 'undefined b c d e f',
                z: 'undefined b c d e f g'
            };
            var source = e1.pipe(operators_1.scan(function (acc, x) { return acc + ' ' + x; }, undefined));
            expectObservable(source).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should scan without seed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c--d--|');
            var e1subs = '^           !';
            var expected = '---x--y--z--|';
            var values = {
                x: 'b',
                y: 'bc',
                z: 'bcd'
            };
            var source = e1.pipe(operators_1.scan(function (acc, x) { return acc + x; }));
            expectObservable(source).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should handle errors', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c--d--#');
            var e1subs = '^           !';
            var expected = '---u--v--w--#';
            var values = {
                u: ['b'],
                v: ['b', 'c'],
                w: ['b', 'c', 'd']
            };
            var source = e1.pipe(operators_1.scan(function (acc, x) { return [].concat(acc, x); }, []));
            expectObservable(source).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should handle errors in the projection function', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c--d--e--f--g--|');
            var e1subs = '^        !            ';
            var expected = '---u--v--#            ';
            var values = {
                u: ['b'],
                v: ['b', 'c'],
                w: ['b', 'c', 'd'],
                x: ['b', 'c', 'd', 'e'],
                y: ['b', 'c', 'd', 'e', 'f'],
                z: ['b', 'c', 'd', 'e', 'f', 'g']
            };
            var source = e1.pipe(operators_1.scan(function (acc, x) {
                if (x === 'd') {
                    throw 'bad!';
                }
                return [].concat(acc, x);
            }, []));
            expectObservable(source).toBe(expected, values, 'bad!');
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('handle empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var expected = '|';
            var source = e1.pipe(operators_1.scan(function (acc, x) { return [].concat(acc, x); }, []));
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('handle never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var expected = '-';
            var source = e1.pipe(operators_1.scan(function (acc, x) { return [].concat(acc, x); }, []));
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('handle throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '#';
            var source = e1.pipe(operators_1.scan(function (acc, x) { return [].concat(acc, x); }, []));
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should allow unsubscribing explicitly and early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c--d--e--f--g--|');
            var unsub = '^-------------!       ';
            var e1subs = '^             !       ';
            var expected = '---u--v--w--x--       ';
            var values = {
                u: ['b'],
                v: ['b', 'c'],
                w: ['b', 'c', 'd'],
                x: ['b', 'c', 'd', 'e'],
                y: ['b', 'c', 'd', 'e', 'f'],
                z: ['b', 'c', 'd', 'e', 'f', 'g']
            };
            var source = e1.pipe(operators_1.scan(function (acc, x) { return [].concat(acc, x); }, []));
            expectObservable(source, unsub).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not break unsubscription chains when result is unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b--c--d--e--f--g--|');
            var e1subs = '^             !       ';
            var expected = '---u--v--w--x--       ';
            var unsub = '^-------------!       ';
            var values = {
                u: ['b'],
                v: ['b', 'c'],
                w: ['b', 'c', 'd'],
                x: ['b', 'c', 'd', 'e'],
                y: ['b', 'c', 'd', 'e', 'f'],
                z: ['b', 'c', 'd', 'e', 'f', 'g']
            };
            var source = e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.scan(function (acc, x) { return [].concat(acc, x); }, []), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(source, unsub).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    // it('should pass current index to accumulator', () => {
    //   testScheduler.run(({ hot, cold, expectObservable, expectSubscriptionsTo }) => {
    //     const values = {
    //       a: 1, b: 3, c: 5,
    //       x: 1, y: 4, z: 9
    //     };
    //     let idx = [0, 1, 2];
    //     const e1 =     hot('--a--b--c--|', values);
    //     const e1subs =     '^          !';
    //     const expected =   '--x--y--z--|';
    //     const scanFunction = (o: number, value: number, index: number) => {
    //       expect(index).to.equal(idx.shift());
    //       return o + value;
    //     };
    //     const scanObs = e1.pipe(
    //       scan(scanFunction, 0),
    //       finalize(() => {
    //         expect(idx).to.be.empty;
    //       })
    //     );
    //     expectObservable(scanObs).toBe(expected, values);
    //     expectSubscriptionsTo(e1).toBe(e1subs);
    //   });
    // });
    // type('should accept array typed reducers', () => {
    //   let a: Observable<{ a: number; b: string }>;
    //   a.pipe(reduce<{ a: number; b: string }>((acc, value) => acc.concat(value), []));
    // });
    // type('should accept T typed reducers', () => {
    //   let a: Observable<{ a?: number; b?: string }>;
    //   a.pipe(reduce((acc, value) => {
    //     value.a = acc.a;
    //     value.b = acc.b;
    //     return acc;
    //   }, {} as { a?: number; b?: string }));
    // });
    // type('should accept R typed reducers', () => {
    //   let a: Observable<{ a: number; b: string }>;
    //   a.pipe(reduce<{ a?: number; b?: string }>((acc, value) => {
    //     value.a = acc.a;
    //     value.b = acc.b;
    //     return acc;
    //   }, {}));
    // });
});
//# sourceMappingURL=scan-spec.js.map