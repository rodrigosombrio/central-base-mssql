"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var testing_1 = require("rxjs/testing");
var rxjs_1 = require("rxjs");
var assertDeepEquals_1 = require("../test_helpers/assertDeepEquals");
/** @test {repeat} */
describe('repeat operator', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    // asDiagram('repeat(3)')
    it('should resubscribe count number of times', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--|                ');
            var subs = ['^       !                ',
                '        ^       !        ',
                '                ^       !'];
            var expected = '--a--b----a--b----a--b--|';
            expectObservable(e1.pipe(operators_1.repeat(3))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should resubscribe multiple times', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--|                        ');
            var subs = ['^       !                        ',
                '        ^       !                ',
                '                ^       !        ',
                '                        ^       !'];
            var expected = '--a--b----a--b----a--b----a--b--|';
            expectObservable(e1.pipe(operators_1.repeat(2), operators_1.repeat(2))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should complete without emit when count is zero', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--|');
            var subs = [];
            var expected = '|';
            expectObservable(e1.pipe(operators_1.repeat(0))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should emit source once when count is one', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--|');
            var subs = '^       !';
            var expected = '--a--b--|';
            expectObservable(e1.pipe(operators_1.repeat(1))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should repeat until gets unsubscribed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--|      ');
            var subs = ['^       !      ',
                '        ^     !'];
            var unsub = '^-------------!';
            var expected = '--a--b----a--b-';
            expectObservable(e1.pipe(operators_1.repeat(10)), unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should be able to repeat indefinitely until unsubscribed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--|                                    ');
            var subs = ['^       !                                    ',
                '        ^       !                            ',
                '                ^       !                    ',
                '                        ^       !            ',
                '                                ^       !    ',
                '                                        ^   !'];
            var unsub = '^-------------------------------------------!';
            var expected = '--a--b----a--b----a--b----a--b----a--b----a--';
            expectObservable(e1.pipe(operators_1.repeat()), unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should not break unsubscription chain when unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--|                                    ');
            var subs = ['^       !                                    ',
                '        ^       !                            ',
                '                ^       !                    ',
                '                        ^       !            ',
                '                                ^       !    ',
                '                                        ^   !'];
            var unsub = '^-------------------------------------------!';
            var expected = '--a--b----a--b----a--b----a--b----a--b----a--';
            var result = e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.repeat(), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should consider negative count as repeat indefinitely', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--|                                    ');
            var subs = ['^       !                                    ',
                '        ^       !                            ',
                '                ^       !                    ',
                '                        ^       !            ',
                '                                ^       !    ',
                '                                        ^   !'];
            var unsub = '^-------------------------------------------!';
            var expected = '--a--b----a--b----a--b----a--b----a--b----a--';
            expectObservable(e1.pipe(operators_1.repeat(-1)), unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should not complete when source never completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var expected = '-';
            expectObservable(e1.pipe(operators_1.repeat(3))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not complete when source does not completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var unsub = '                              !';
            var subs = '^                             !';
            var expected = '-';
            expectObservable(e1.pipe(operators_1.repeat(3)), unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should complete immediately when source does not complete without emit but count is zero', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var subs = [];
            var expected = '|';
            expectObservable(e1.pipe(operators_1.repeat(0))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should complete immediately when source does not complete but count is zero', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--');
            var subs = [];
            var expected = '|';
            expectObservable(e1.pipe(operators_1.repeat(0))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should emit source once and does not complete when source emits but does not complete', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--');
            var subs = ['^       '];
            var expected = '--a--b--';
            expectObservable(e1.pipe(operators_1.repeat(3))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should complete when source is empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = ['(^!)', '(^!)', '(^!)'];
            var expected = '|';
            expectObservable(e1.pipe(operators_1.repeat(3))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should complete when source does not emit', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('----|        ');
            var subs = ['^   !        ',
                '    ^   !    ',
                '        ^   !'];
            var expected = '------------|';
            expectObservable(e1.pipe(operators_1.repeat(3))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should complete immediately when source does not emit but count is zero', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('----|');
            var subs = [];
            var expected = '|';
            expectObservable(e1.pipe(operators_1.repeat(0))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should raise error when source raises error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a--b--#');
            var subs = '^       !';
            var expected = '--a--b--#';
            expectObservable(e1.pipe(operators_1.repeat(2))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(subs);
        });
    });
    it('should raises error if source throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '#';
            expectObservable(e1.pipe(operators_1.repeat(3))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should raises error if source throws when repeating infinitely', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '#';
            expectObservable(e1.pipe(operators_1.repeat())).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should raise error after first emit succeed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var repeated = false;
            var e1 = cold('--a--|').pipe(operators_1.map(function (x) {
                if (repeated) {
                    throw 'error';
                }
                else {
                    repeated = true;
                    return x;
                }
            }));
            var expected = '--a----#';
            expectObservable(e1.pipe(operators_1.repeat(2))).toBe(expected);
        });
    });
    // it('should repeat a synchronous source (multicasted and refCounted) multiple times', done => {
    //   const expected = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];
    //   of(1, 2, 3).pipe(
    //     multicast(() => new Subject<number>()),
    //     refCount(),
    //     repeat(5)
    //   ).subscribe(
    //       (x: number) => { expect(x).to.equal(expected.shift()); },
    //       (x) => {
    //         done(new Error('should not be called'));
    //       }, () => {
    //         expect(expected.length).to.equal(0);
    //         done();
    //       });
    // });
});
//# sourceMappingURL=repeat-spec.js.map