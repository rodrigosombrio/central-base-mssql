"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {takeWhile} */
describe('takeWhile operator', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    // asDiagram('takeWhile(x => x < 4)')
    it('should take all elements until predicate is false', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1-^2--3--4--5--6--|');
            var sourceSubs = '^      !         ';
            var expected = '-2--3--|         ';
            var result = source.pipe(operators_1.takeWhile(function (v) { return +v < 4; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should take all elements with predicate returns true', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var e1subs = '^             !';
            var expected = '--b--c--d--e--|';
            expectObservable(e1.pipe(operators_1.takeWhile(function () { return true; }))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take all elements with truthy predicate', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var e1subs = '^             !';
            var expected = '--b--c--d--e--|';
            expectObservable(e1.pipe(operators_1.takeWhile((function () { return {}; })))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should skip all elements with predicate returns false', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var e1subs = '^ !            ';
            var expected = '--|            ';
            expectObservable(e1.pipe(operators_1.takeWhile(function () { return false; }))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should skip all elements with falsy predicate', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var e1subs = '^ !            ';
            var expected = '--|            ';
            expectObservable(e1.pipe(operators_1.takeWhile(function () { return null; }))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take all elements until predicate return false', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var e1subs = '^       !      ';
            var expected = '--b--c--|      ';
            function predicate(value) {
                return value !== 'd';
            }
            expectObservable(e1.pipe(operators_1.takeWhile(predicate))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take elements with predicate when source does not complete', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--');
            var e1subs = '^             ';
            var expected = '--b--c--d--e--';
            expectObservable(e1.pipe(operators_1.takeWhile(function () { return true; }))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not complete when source never completes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var expected = '-';
            var result = e1.pipe(operators_1.takeWhile(function () { return true; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should complete when source does not emit', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^------------|');
            var e1subs = '^            !';
            var expected = '-------------|';
            expectObservable(e1.pipe(operators_1.takeWhile(function () { return true; }))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should complete when source is empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var expected = '|';
            var result = e1.pipe(operators_1.takeWhile(function () { return true; }));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should pass element index to predicate', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var e1subs = '^       !      ';
            var expected = '--b--c--|      ';
            function predicate(value, index) {
                return index < 2;
            }
            expectObservable(e1.pipe(operators_1.takeWhile(predicate))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should raise error when source raises error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--#');
            var e1subs = '^             !';
            var expected = '--b--c--d--e--#';
            expectObservable(e1.pipe(operators_1.takeWhile(function () { return true; }))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should raise error when source throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('#');
            var subs = '(^!)';
            var expected = '#';
            expectObservable(source.pipe(operators_1.takeWhile(function () { return true; }))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should invoke predicate until return false', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var e1subs = '^       !      ';
            var expected = '--b--c--|      ';
            var invoked = 0;
            function predicate(value) {
                invoked++;
                return value !== 'd';
            }
            var source = e1.pipe(operators_1.takeWhile(predicate), operators_1.tap({
                complete: function () {
                    chai_1.expect(invoked).to.equal(3);
                }
            }));
            expectObservable(source).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should raise error if predicate throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var e1subs = '^ !            ';
            var expected = '--#            ';
            function predicate(value) {
                throw 'error';
            }
            expectObservable(e1.pipe(operators_1.takeWhile(predicate))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take elements until unsubscribed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var unsub = '-----!         ';
            var e1subs = '^    !         ';
            var expected = '--b---         ';
            function predicate(value) {
                return value !== 'd';
            }
            expectObservable(e1.pipe(operators_1.takeWhile(predicate)), unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not break unsubscription chain when unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a-^-b--c--d--e--|');
            var unsub = '-----!         ';
            var e1subs = '^    !         ';
            var expected = '--b---         ';
            function predicate(value) {
                return value !== 'd';
            }
            var result = e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.takeWhile(predicate), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not break the subscription chain', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('--^-----a-b-|');
            var subs = '^       !  ';
            var inner = cold('        -----x|');
            var innerSubs = '      ^     ';
            var expected = '  -----------x|';
            var tested = source.pipe(operators_1.takeWhile(function (x) { return x !== 'b'; }), operators_1.mergeMap(function () { return inner; }));
            expectObservable(tested).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
            expectSubscriptionsTo(inner).toBe(innerSubs);
        });
    });
    it('should not break the subscription chain for early unsubscription', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('--^-----a-b-|');
            var subs = '^    !     ';
            var inner = cold('        -----x|');
            var innerSubs = '           ';
            var expected = '  -----      ';
            var tested = source.pipe(operators_1.takeWhile(function (x) { return x !== 'b'; }), operators_1.mergeMap(function () { return inner; }));
            expectObservable(tested, subs).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
            expectSubscriptionsTo(inner).toBe(innerSubs);
        });
    });
});
//# sourceMappingURL=takeWhile-spec.js.map