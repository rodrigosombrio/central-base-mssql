"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testing_1 = require("rxjs/testing");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {take} */
describe('take operator', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('take(2)')
    it('should take two values of an observable with many values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('--a-----b----c---d--|');
            var e1subs = '^       !            ';
            var expected = '--a-----(b|)         ';
            expectObservable(e1.pipe(operators_1.take(2))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should work with empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var expected = '|';
            expectObservable(e1.pipe(operators_1.take(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should go on forever on never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^';
            var expected = '-';
            expectObservable(e1.pipe(operators_1.take(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should be empty on take(0)', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b----c---d--|');
            var e1subs = []; // Don't subscribe at all
            var expected = '|';
            expectObservable(e1.pipe(operators_1.take(0))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take one value of an observable with one value', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---(a|)');
            var e1subs = '^  !   ';
            var expected = '---(a|)';
            expectObservable(e1.pipe(operators_1.take(1))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should take one values of an observable with many values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^--b----c---d--|');
            var e1subs = '^  !            ';
            var expected = '---(b|)         ';
            expectObservable(e1.pipe(operators_1.take(1))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should error on empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^----|');
            var e1subs = '^    !';
            var expected = '-----|';
            expectObservable(e1.pipe(operators_1.take(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should propagate error from the source observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^---#', null, 'too bad');
            var e1subs = '^   !';
            var expected = '----#';
            expectObservable(e1.pipe(operators_1.take(42))).toBe(expected, null, 'too bad');
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should propagate error from an observable with values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^--a--b--#');
            var e1subs = '^        !';
            var expected = '---a--b--#';
            expectObservable(e1.pipe(operators_1.take(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should allow unsubscribing explicitly and early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^--a--b-----c--d--e--|');
            var unsub = '^--------!            ';
            var e1subs = '^        !            ';
            var expected = '---a--b---            ';
            expectObservable(e1.pipe(operators_1.take(42)), unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should work with throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var expected = '#';
            expectObservable(e1.pipe(operators_1.take(42))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    // TODO(benlesh): uncomment
    // it('should throw if total is less than zero', () => {
    //   expect(() => { range(0, 10).pipe(take(-1)); })
    //     .to.throw(ArgumentOutOfRangeError);
    // });
    it('should not break unsubscription chain when unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---^--a--b-----c--d--e--|');
            var unsub = '^--------!            ';
            var e1subs = '^        !            ';
            var expected = '---a--b---            ';
            var result = e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.take(42), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should unsubscribe from the source when it reaches the limit', function () {
        var source = new rxjs_1.Observable(function (observer) {
            chai_1.expect(observer.closed).to.be.false;
            observer.next(42);
            chai_1.expect(observer.closed).to.be.true;
        }).pipe(operators_1.take(1));
        source.subscribe();
    });
    it('should complete when the source is reentrant', function () {
        var completed = false;
        var source = new rxjs_1.Subject();
        source.pipe(operators_1.take(5)).subscribe({
            next: function () {
                source.next(undefined);
            },
            complete: function () {
                completed = true;
            }
        });
        source.next(undefined);
        chai_1.expect(completed).to.be.true;
    });
});
//# sourceMappingURL=take-spec.js.map