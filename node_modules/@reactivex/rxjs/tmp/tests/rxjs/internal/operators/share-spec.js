"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testing_1 = require("rxjs/testing");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
/** @test {share} */
describe('share operator', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('share')
    it('should mirror a simple source Observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('--1-2---3-4--5-|');
            var sourceSubs = '^              !';
            var expected = '--1-2---3-4--5-|';
            var shared = source.pipe(operators_1.share());
            expectObservable(shared).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should share a single subscription', function () {
        var subscriptionCount = 0;
        var obs = new rxjs_1.Observable(function (observer) {
            subscriptionCount++;
        });
        var source = obs.pipe(operators_1.share());
        chai_1.expect(subscriptionCount).to.equal(0);
        source.subscribe();
        source.subscribe();
        chai_1.expect(subscriptionCount).to.equal(1);
    });
    it('should not change the output of the observable when error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('---a--^--b--c--d--e--#');
            var e1subs = '^              !';
            var expected = '---b--c--d--e--#';
            expectObservable(e1.pipe(operators_1.share())).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not change the output of the observable when successful with cold observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a--b--c--d--e--|');
            var e1subs = '^                 !';
            var expected = '---a--b--c--d--e--|';
            expectObservable(e1.pipe(operators_1.share())).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should not change the output of the observable when error with cold observable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a--b--c--d--e--#');
            var e1subs = '^                 !';
            var expected = '---a--b--c--d--e--#';
            expectObservable(e1.pipe(operators_1.share())).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should retry just fine', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('---a--b--c--d--e--#');
            var e1subs = ['^                 !                  ',
                '                  ^                 !'];
            var expected = '---a--b--c--d--e-----a--b--c--d--e--#';
            expectObservable(e1.pipe(operators_1.share(), operators_1.retry(1))).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
        });
    });
    it('should share the same values to multiple observers', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-1-2-3----4-|');
            var sourceSubs = '^           !';
            var shared = source.pipe(operators_1.share());
            var subscriber1 = hot('a|           ').pipe(operators_1.mergeMapTo(shared));
            var expected1 = '-1-2-3----4-|';
            var subscriber2 = hot('----b|       ').pipe(operators_1.mergeMapTo(shared));
            var expected2 = '-----3----4-|';
            var subscriber3 = hot('--------c|   ').pipe(operators_1.mergeMapTo(shared));
            var expected3 = '----------4-|';
            expectObservable(subscriber1).toBe(expected1);
            expectObservable(subscriber2).toBe(expected2);
            expectObservable(subscriber3).toBe(expected3);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should share an error from the source to multiple observers', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-1-2-3----4-#');
            var sourceSubs = '^           !';
            var shared = source.pipe(operators_1.share());
            var subscriber1 = hot('a|           ').pipe(operators_1.mergeMapTo(shared));
            var expected1 = '-1-2-3----4-#';
            var subscriber2 = hot('----b|       ').pipe(operators_1.mergeMapTo(shared));
            var expected2 = '-----3----4-#';
            var subscriber3 = hot('--------c|   ').pipe(operators_1.mergeMapTo(shared));
            var expected3 = '----------4-#';
            expectObservable(subscriber1).toBe(expected1);
            expectObservable(subscriber2).toBe(expected2);
            expectObservable(subscriber3).toBe(expected3);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should share the same values to multiple observers, ' +
        'but is unsubscribed explicitly and early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-1-2-3----4-|');
            var sourceSubs = '^        !   ';
            var shared = source.pipe(operators_1.share());
            var unsub = '         !   ';
            var subscriber1 = hot('a|           ').pipe(operators_1.mergeMapTo(shared));
            var expected1 = '-1-2-3----   ';
            var subscriber2 = hot('----b|       ').pipe(operators_1.mergeMapTo(shared));
            var expected2 = '-----3----   ';
            var subscriber3 = hot('--------c|   ').pipe(operators_1.mergeMapTo(shared));
            var expected3 = '----------   ';
            expectObservable(subscriber1, unsub).toBe(expected1);
            expectObservable(subscriber2, unsub).toBe(expected2);
            expectObservable(subscriber3, unsub).toBe(expected3);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should share an empty source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('|');
            var sourceSubs = '(^!)';
            var shared = source.pipe(operators_1.share());
            var expected = '|';
            expectObservable(shared).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should share a never source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-');
            var sourceSubs = '^';
            var shared = source.pipe(operators_1.share());
            var expected = '-';
            expectObservable(shared).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should share a throw source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('#');
            var sourceSubs = '(^!)';
            var shared = source.pipe(operators_1.share());
            var expected = '#';
            expectObservable(shared).toBe(expected);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should connect when first subscriber subscribes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-1-2-3----4-|');
            var sourceSubs = '   ^           !';
            var shared = source.pipe(operators_1.share());
            var subscriber1 = hot('---a|           ').pipe(operators_1.mergeMapTo(shared));
            var expected1 = '----1-2-3----4-|';
            var subscriber2 = hot('-------b|       ').pipe(operators_1.mergeMapTo(shared));
            var expected2 = '--------3----4-|';
            var subscriber3 = hot('-----------c|   ').pipe(operators_1.mergeMapTo(shared));
            var expected3 = '-------------4-|';
            expectObservable(subscriber1).toBe(expected1);
            expectObservable(subscriber2).toBe(expected2);
            expectObservable(subscriber3).toBe(expected3);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should disconnect when last subscriber unsubscribes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-1-2-3----4-|');
            var sourceSubs = '   ^        !   ';
            var shared = source.pipe(operators_1.share());
            var subscriber1 = hot('---a|           ').pipe(operators_1.mergeMapTo(shared));
            var unsub1 = '          !     ';
            var expected1 = '----1-2-3--     ';
            var subscriber2 = hot('-------b|       ').pipe(operators_1.mergeMapTo(shared));
            var unsub2 = '            !   ';
            var expected2 = '--------3----   ';
            expectObservable(subscriber1, unsub1).toBe(expected1);
            expectObservable(subscriber2, unsub2).toBe(expected2);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should not break unsubscription chain when last subscriber unsubscribes', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-1-2-3----4-|');
            var sourceSubs = '   ^        !   ';
            var shared = source.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.share(), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            var subscriber1 = hot('---a|           ').pipe(operators_1.mergeMapTo(shared));
            var unsub1 = '          !     ';
            var expected1 = '----1-2-3--     ';
            var subscriber2 = hot('-------b|       ').pipe(operators_1.mergeMapTo(shared));
            var unsub2 = '            !   ';
            var expected2 = '--------3----   ';
            expectObservable(subscriber1, unsub1).toBe(expected1);
            expectObservable(subscriber2, unsub2).toBe(expected2);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should be retryable when cold source is synchronous', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('(123#)');
            var shared = source.pipe(operators_1.share());
            var subscribe1 = 's         ';
            var expected1 = '(123123#) ';
            var subscribe2 = ' s        ';
            var expected2 = ' (123123#)';
            var sourceSubs = ['(^!)',
                '(^!)',
                ' (^!)',
                ' (^!)'];
            expectObservable(hot(subscribe1).pipe(operators_1.tap(function () {
                expectObservable(shared.pipe(operators_1.retry(1))).toBe(expected1);
            }))).toBe(subscribe1);
            expectObservable(hot(subscribe2).pipe(operators_1.tap(function () {
                expectObservable(shared.pipe(operators_1.retry(1))).toBe(expected2);
            }))).toBe(subscribe2);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should be repeatable when cold source is synchronous', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('(123|)');
            var shared = source.pipe(operators_1.share(), operators_1.repeat(2));
            var subscribe1 = '^         ';
            var expected1 = '(123123|) ';
            var subscribe2 = ' ^        ';
            var expected2 = '-(123123|)';
            var sourceSubs = ['(^!)',
                '(^!)',
                ' (^!)',
                ' (^!)'];
            expectObservable(shared, subscribe1).toBe(expected1);
            expectObservable(shared, subscribe2).toBe(expected2);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should be retryable', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-1-2-3----4-#                        ');
            var sourceSubs = ['^           !                        ',
                '            ^           !            ',
                '                        ^           !'];
            var shared = source.pipe(operators_1.share(), operators_1.retry(2));
            var subscribe1 = '^                                    ';
            var expected1 = '-1-2-3----4--1-2-3----4--1-2-3----4-#';
            var subscribe2 = '    ^                                ';
            var expected2 = '-----3----4--1-2-3----4--1-2-3----4-#';
            expectObservable(shared, subscribe1).toBe(expected1);
            // expectObservable(shared, subscribe2).toBe(expected2);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should be repeatable', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-1-2-3----4-|                        ');
            var sourceSubs = ['^           !                        ',
                '            ^           !            ',
                '                        ^           !'];
            var shared = source.pipe(operators_1.share(), operators_1.repeat(3));
            var subscribe1 = '^                                    ';
            var expected1 = '-1-2-3----4--1-2-3----4--1-2-3----4-|';
            var subscribe2 = '    ^                                ';
            var expected2 = '-----3----4--1-2-3----4--1-2-3----4-|';
            expectObservable(shared, subscribe1).toBe(expected1);
            expectObservable(shared, subscribe2).toBe(expected2);
            expectSubscriptionsTo(source).toBe(sourceSubs);
        });
    });
    it('should not change the output of the observable when never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.NEVER;
            var expected = '-';
            expectObservable(e1.pipe(operators_1.share())).toBe(expected);
        });
    });
    it('should not change the output of the observable when empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = rxjs_1.EMPTY;
            var expected = '|';
            expectObservable(e1.pipe(operators_1.share())).toBe(expected);
        });
    });
});
//# sourceMappingURL=share-spec.js.map