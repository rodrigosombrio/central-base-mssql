"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var assertDeepEquals_1 = require("rxjs/internal/test_helpers/assertDeepEquals");
var lowerCaseO_1 = require("rxjs/internal/test_helpers/lowerCaseO");
/** @test {withLatestFrom} */
describe('withLatestFrom operator', function () {
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(assertDeepEquals_1.assertDeepEquals);
    });
    //asDiagram('withLatestFrom')
    it('should combine events from cold observables', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-a--b-----c-d-e-|');
            var e2 = cold('--1--2-3-4---|   ');
            var expected = '----B-----C-D-E-|';
            var result = e1.pipe(operators_1.withLatestFrom(e2));
            expectObservable(result).toBe(expected, { B: ['b', '1'], C: ['c', '4'], D: ['d', '4'], E: ['e', '4'] });
        });
    });
    it('should merge the value with the latest values from the other observables into arrays', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^---b---c---d-|');
            var e1subs = '^             !';
            var e2 = hot('--e--^-f---g---h------|');
            var e2subs = '^             !';
            var e3 = hot('--i--^-j---k---l------|');
            var e3subs = '^             !';
            var expected = '----x---y---z-|';
            var values = {
                x: ['b', 'f', 'j'],
                y: ['c', 'g', 'k'],
                z: ['d', 'h', 'l']
            };
            var result = e1.pipe(operators_1.withLatestFrom(e2, e3));
            expectObservable(result).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should allow unsubscribing early and explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^---b---c---d-|');
            var e1subs = '^          !   ';
            var e2 = hot('--e--^-f---g---h------|');
            var e2subs = '^          !   ';
            var e3 = hot('--i--^-j---k---l------|');
            var e3subs = '^          !   ';
            var expected = '----x---y---   ';
            var unsub = '^----------!   ';
            var values = {
                x: ['b', 'f', 'j'],
                y: ['c', 'g', 'k'],
                z: ['d', 'h', 'l']
            };
            var result = e1.pipe(operators_1.withLatestFrom(e2, e3));
            expectObservable(result, unsub).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should not break unsubscription chains when result is unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^---b---c---d-|');
            var e1subs = '^          !   ';
            var e2 = hot('--e--^-f---g---h------|');
            var e2subs = '^          !   ';
            var e3 = hot('--i--^-j---k---l------|');
            var e3subs = '^          !   ';
            var expected = '----x---y---   ';
            var unsub = '^----------!   ';
            var values = {
                x: ['b', 'f', 'j'],
                y: ['c', 'g', 'k'],
                z: ['d', 'h', 'l']
            };
            var result = e1.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.withLatestFrom(e2, e3), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(result, unsub).toBe(expected, values);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should handle empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('|');
            var e1subs = '(^!)';
            var e2 = hot('--e--^-f---g---h----|');
            var e2subs = '(^!)';
            var e3 = hot('--i--^-j---k---l----|');
            var e3subs = '(^!)';
            var expected = '|'; // empty
            var result = e1.pipe(operators_1.withLatestFrom(e2, e3));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should handle never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('-');
            var e1subs = '^               ';
            var e2 = hot('--e--^-f---g---h----|');
            var e2subs = '^              !';
            var e3 = hot('--i--^-j---k---l----|');
            var e3subs = '^              !';
            var expected = '--------------------'; // never
            var result = e1.pipe(operators_1.withLatestFrom(e2, e3));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should handle throw', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = cold('#');
            var e1subs = '(^!)';
            var e2 = hot('--e--^-f---g---h----|');
            var e2subs = '(^!)';
            var e3 = hot('--i--^-j---k---l----|');
            var e3subs = '(^!)';
            var expected = '#'; // throw
            var result = e1.pipe(operators_1.withLatestFrom(e2, e3));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should handle error', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^---b---#', undefined, 'boo-hoo');
            var e1subs = '^       !';
            var e2 = hot('--e--^-f---g---h----|');
            var e2subs = '^       !';
            var e3 = hot('--i--^-j---k---l----|');
            var e3subs = '^       !';
            var expected = '----x---#'; // throw
            var values = {
                x: ['b', 'f', 'j']
            };
            var result = e1.pipe(operators_1.withLatestFrom(e2, e3));
            expectObservable(result).toBe(expected, values, 'boo-hoo');
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should handle merging with empty', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^---b---c---d-|   ');
            var e1subs = '^             !   ';
            var e2 = cold('|');
            var e2subs = '(^!)';
            var e3 = hot('--i--^-j---k---l------|');
            var e3subs = '^             !   ';
            var expected = '--------------|   ';
            var result = e1.pipe(operators_1.withLatestFrom(e2, e3));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should handle merging with never', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var e1 = hot('--a--^---b---c---d-|   ');
            var e1subs = '^             !   ';
            var e2 = cold('-');
            var e2subs = '^             !   ';
            var e3 = hot('--i--^-j---k---l------|');
            var e3subs = '^             !   ';
            var expected = '--------------|   ';
            var result = e1.pipe(operators_1.withLatestFrom(e2, e3));
            expectObservable(result).toBe(expected);
            expectSubscriptionsTo(e1).toBe(e1subs);
            expectSubscriptionsTo(e2).toBe(e2subs);
            expectSubscriptionsTo(e3).toBe(e3subs);
        });
    });
    it('should handle promises', function (done) {
        rxjs_1.of(1).pipe(operators_1.delay(1), operators_1.withLatestFrom(Promise.resolve(2), Promise.resolve(3)))
            .subscribe({
            next: function (x) {
                chai_1.expect(x).to.deep.equal([1, 2, 3]);
            },
            complete: done,
        });
    });
    it('should handle arrays', function () {
        rxjs_1.of(1).pipe(operators_1.delay(1), operators_1.withLatestFrom([2, 3, 4], [4, 5, 6]))
            .subscribe(function (x) {
            chai_1.expect(x).to.deep.equal([1, 4, 6]);
        });
    });
    it('should handle lowercase-o observables', function () {
        rxjs_1.of(1).pipe(operators_1.delay(1), operators_1.withLatestFrom(lowerCaseO_1.lowerCaseO(2, 3, 4), lowerCaseO_1.lowerCaseO(4, 5, 6)))
            .subscribe(function (x) {
            chai_1.expect(x).to.deep.equal([1, 4, 6]);
        });
    });
});
//# sourceMappingURL=withLatestFrom-spec.js.map