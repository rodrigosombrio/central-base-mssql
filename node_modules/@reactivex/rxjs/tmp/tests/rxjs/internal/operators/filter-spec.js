"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var testing_1 = require("rxjs/testing");
var operators_1 = require("rxjs/operators");
var chai_1 = require("chai");
/** @test {filter} */
describe('filter', function () {
    function oddFilter(x) {
        return (+x) % 2 === 1;
    }
    function isPrime(i) {
        if (+i <= 1) {
            return false;
        }
        var max = Math.floor(Math.sqrt(+i));
        for (var j = 2; j <= max; ++j) {
            if (+i % j === 0) {
                return false;
            }
        }
        return true;
    }
    var testScheduler;
    beforeEach(function () {
        testScheduler = new testing_1.TestScheduler(function (a, b) {
            chai_1.expect(a).to.deep.equal(b);
        });
    });
    //asDiagram('filter(x => x % 2 === 1)')
    it('should filter out even values', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('--0--1--2--3--4--|');
            var subs = '^                !';
            var expected = '-----1-----3-----|';
            expectObservable(source.pipe(operators_1.filter(oddFilter))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should filter in only prime numbers', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var subs = '^                  !';
            var expected = '--3---5----7-------|';
            expectObservable(source.pipe(operators_1.filter(isPrime))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should filter with an always-true predicate', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var expected = '--3-4-5-6--7-8--9--|';
            var predicate = function () { return true; };
            expectObservable(source.pipe(operators_1.filter(predicate))).toBe(expected);
        });
    });
    it('should filter with an always-false predicate', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var expected = '-------------------|';
            var predicate = function () { return false; };
            expectObservable(source.pipe(operators_1.filter(predicate))).toBe(expected);
        });
    });
    it('should filter in only prime numbers, source unsubscribes early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var subs = '^           !       ';
            var unsub = '^-----------!       ';
            var expected = '--3---5----7-       ';
            expectObservable(source.pipe(operators_1.filter(isPrime)), unsub).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should filter in only prime numbers, source throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--#');
            var subs = '^                  !';
            var expected = '--3---5----7-------#';
            expectObservable(source.pipe(operators_1.filter(isPrime))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should filter in only prime numbers, but predicate throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var subs = '^       !           ';
            var expected = '--3---5-#           ';
            var invoked = 0;
            function predicate(x, index) {
                invoked++;
                if (invoked === 4) {
                    throw 'error';
                }
                return isPrime(x);
            }
            expectObservable(source.pipe(operators_1.filter(predicate))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should filter in only prime numbers, predicate with index', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var subs = '^                  !';
            var expected = '--3--------7-------|';
            function predicate(x, i) {
                return isPrime((+x) + i * 10);
            }
            expectObservable(source.pipe(operators_1.filter(predicate))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should invoke predicate once for each checked value', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var expected = '--3---5----7-------|';
            var invoked = 0;
            var predicate = function (x) {
                invoked++;
                return isPrime(x);
            };
            var r = source.pipe(operators_1.filter(predicate), operators_1.tap({
                complete: function () {
                    chai_1.expect(invoked).to.equal(7);
                }
            }));
            expectObservable(r).toBe(expected);
        });
    });
    it('should filter in only prime numbers, predicate with index, ' +
        'source unsubscribes early', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var subs = '^           !       ';
            var unsub = '^-----------!       ';
            var expected = '--3--------7-       ';
            function predicate(x, i) {
                return isPrime((+x) + i * 10);
            }
            expectObservable(source.pipe(operators_1.filter(predicate)), unsub).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should filter in only prime numbers, predicate with index, source throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--#');
            var subs = '^                  !';
            var expected = '--3--------7-------#';
            function predicate(x, i) {
                return isPrime((+x) + i * 10);
            }
            expectObservable(source.pipe(operators_1.filter(predicate))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should filter in only prime numbers, predicate with index and throws', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var subs = '^       !           ';
            var expected = '--3-----#           ';
            var invoked = 0;
            function predicate(x, i) {
                invoked++;
                if (invoked === 4) {
                    throw 'error';
                }
                return isPrime((+x) + i * 10);
            }
            expectObservable(source.pipe(operators_1.filter(predicate))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should compose with another filter to allow multiples of six', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var expected = '--------6----------|';
            expectObservable(source.pipe(operators_1.filter(function (x) { return (+x) % 2 === 0; }), operators_1.filter(function (x) { return (+x) % 3 === 0; }))).toBe(expected);
        });
    });
    // TODO: should filter allow "this arg"? I hope not. ewww
    // it('should be able to accept and use a thisArg', () => {
    //   testScheduler.run(({ hot, expectObservable }) => {
    //     const source = hot('-1--2--^-3-4-5-6--7-8--9--|');
    //     const expected =          '--------6----------|';
    //     class Filterer {
    //       filter1 = (x: string) => (+x) % 2 === 0;
    //       filter2 = (x: string) => (+x) % 3 === 0;
    //     }
    //     const filterer = new Filterer();
    //     expectObservable(
    //       source.pipe(
    //         filter(function (this: any, x) { return this.filter1(x); }, filterer),
    //         filter(function (this: any, x) { return this.filter2(x); }, filterer),
    //         filter(function (this: any, x) { return this.filter1(x); }, filterer)
    //       )
    //     ).toBe(expected);
    //   });
    // });
    it('should be able to use filter and map composed', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var expected = '----a---b----c-----|';
            var values = { a: 16, b: 36, c: 64 };
            expectObservable(source.pipe(operators_1.filter(function (x) { return (+x) % 2 === 0; }), operators_1.map(function (x) { return (+x) * (+x); }))).toBe(expected, values);
        });
    });
    it('should propagate errors from the source', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('--0--1--2--3--4--#');
            var subs = '^                !';
            var expected = '-----1-----3-----#';
            expectObservable(source.pipe(operators_1.filter(oddFilter))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should support Observable.empty', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('|');
            var subs = '(^!)';
            var expected = '|';
            expectObservable(source.pipe(operators_1.filter(oddFilter))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should support Observable.never', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('-');
            var subs = '^';
            var expected = '-';
            expectObservable(source.pipe(operators_1.filter(oddFilter))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should support Observable.throw', function () {
        testScheduler.run(function (_a) {
            var cold = _a.cold, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = cold('#');
            var subs = '(^!)';
            var expected = '#';
            expectObservable(source.pipe(operators_1.filter(oddFilter))).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
    it('should send errors down the error path', function (done) {
        rxjs_1.of(42).pipe(operators_1.filter((function (x, index) {
            throw 'bad';
        }))).subscribe({
            next: function (x) {
                done(new Error('should not be called'));
            },
            error: function (err) {
                chai_1.expect(err).to.equal('bad');
                done();
            },
            complete: function () {
                done(new Error('should not be called'));
            }
        });
    });
    it('should not break unsubscription chain when unsubscribed explicitly', function () {
        testScheduler.run(function (_a) {
            var hot = _a.hot, expectObservable = _a.expectObservable, expectSubscriptionsTo = _a.expectSubscriptionsTo;
            var source = hot('-1--2--^-3-4-5-6--7-8--9--|');
            var subs = '^           !       ';
            var unsub = '^-----------!       ';
            var expected = '--3---5----7-       ';
            var r = source.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.filter(isPrime), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
            expectObservable(r, unsub).toBe(expected);
            expectSubscriptionsTo(source).toBe(subs);
        });
    });
});
//# sourceMappingURL=filter-spec.js.map